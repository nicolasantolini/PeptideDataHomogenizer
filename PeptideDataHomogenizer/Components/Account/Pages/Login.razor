@page "/Login"
@attribute [AllowAnonymous]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using PeptideDataHomogenizer.Data
@using PeptideDataHomogenizer.Services
@using PeptideDataHomogenizer.State

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserOrganizationService UserOrganizationService
@inject IJSRuntime JSRuntime

<PageTitle>Log in - Peptide Data Homogenizer</PageTitle>

<div class="min-vh-80 d-flex align-items-center py-5">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-12 col-xl-12">
                <div class="text-center mb-5">
                    <div class="d-inline-block bg-primary rounded-circle p-3 mb-3 shadow">
                        <i class="bi bi-lock text-white fs-1"></i>
                    </div>
                    <h1 class="display-5 fw-bold text-primary mb-2">Peptide Data Homogenizer</h1>
                    <p class="text-muted">Secure access to your peptide research platform</p>
                </div>

                <div class="card shadow-lg border-0 rounded-3 overflow-hidden">
                    <div class="card-body p-4 p-md-5">
                        <div class="text-center mb-4">
                            <h2 class="h4 fw-bold">Sign in to your account</h2>
                            <p class="text-muted">Enter your credentials to continue</p>
                        </div>

                        <StatusMessage Message="@errorMessage" />
                        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="alert alert-danger" role="alert" />

                            <div class="mb-3">
                                <label for="Input.Email" class="form-label">Email address</label>
                                <InputText @bind-Value="Input.Email" id="Input.Email"
                                           class="form-control form-control-lg"
                                           autocomplete="username"
                                           aria-required="true"
                                           placeholder="name@example.com" />
                                <ValidationMessage For="() => Input.Email" class="text-danger small mt-1" />
                            </div>

                            <div class="mb-3">
                                <div class="d-flex justify-content-between">
                                    <label for="Input.Password" class="form-label">Password</label>
                                    <a href="Account/ForgotPassword" class="small text-decoration-none">Forgot password?</a>
                                </div>
                                <InputText type="password" @bind-Value="Input.Password" id="Input.Password"
                                           class="form-control form-control-lg"
                                           autocomplete="current-password"
                                           aria-required="true"
                                           placeholder="••••••••" />
                                <ValidationMessage For="() => Input.Password" class="text-danger small mt-1" />
                            </div>

                            <div class="mb-3 form-check">
                                <InputCheckbox @bind-Value="Input.RememberMe" id="rememberMe" class="form-check-input" />
                                <label class="form-check-label" for="rememberMe">Remember me</label>
                            </div>

                            <button type="submit" class="btn btn-primary btn-lg w-100 mb-3">
                                <i class="bi bi-box-arrow-in-right me-2"></i>Sign in
                            </button>

                            <div class="text-center mt-4 pt-2 border-top">
                                <p class="small mb-0">
                                    Don't have an account?
                                    <a href="@(NavigationManager.GetUriWithQueryParameters("Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
                                       class="text-decoration-none fw-semibold">
                                        Register now
                                    </a>
                                </p>
                                @* <p class="small">
                                    <a href="Account/ResendEmailConfirmation" class="text-decoration-none">Resend email confirmation</a>
                                </p> *@
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>

            @* <div class="col-md-8 col-lg-5 col-xl-4 mt-5 mt-lg-0">
                <div class="card shadow-sm border-0 rounded-3">
                    <div class="card-body p-4 p-md-5">
                        <h3 class="h5 fw-bold mb-3">Alternative login</h3>
                        <p class="text-muted small mb-4">Use external services to authenticate</p>
                        <ExternalLoginPicker />
                    </div>
                </div>
            </div> *@
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [Inject] private UserManager<ApplicationUser> UserManager { get; set; } = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        Logger.LogInformation($"Attempting login for {Input.Email}");

        // Verify user exists first
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user == null)
        {
            Logger.LogWarning($"User {Input.Email} not found");
            errorMessage = "Invalid login attempt.";
            return;
        }

        Logger.LogInformation($"User found: {user.Id}, SecurityStamp: {user.SecurityStamp}");
        Logger.LogInformation($"Current PasswordHash: {user.PasswordHash}");

        // Verify password manually
        var passwordValid = await UserManager.CheckPasswordAsync(user, Input.Password);
        Logger.LogInformation($"Manual password check result: {passwordValid}");

        // Attempt login
        var result = await SignInManager.PasswordSignInAsync(
            user.UserName,
            Input.Password,
            Input.RememberMe,
            lockoutOnFailure: false);

        Logger.LogInformation($"SignIn result: {result.Succeeded}");
        Logger.LogInformation($"SignIn failure: {result.IsNotAllowed}");
        Logger.LogInformation($"SignIn locked out: {result.IsLockedOut}");
        Logger.LogInformation($"SignIn 2FA required: {result.RequiresTwoFactor}");

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl ?? "/");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo($"Account/LoginWith2fa?ReturnUrl={ReturnUrl}");
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Invalid login attempt. Please check your credentials.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
