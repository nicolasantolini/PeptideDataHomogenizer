
@page "/register/{token:long}"
@rendermode InteractiveServer
@attribute [AllowAnonymous]

@using System.ComponentModel.DataAnnotations
@using Entities
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using PeptideDataHomogenizer.Data
@using PeptideDataHomogenizer.Services

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject DatabaseDataHandler DatabaseDataHandler
@inject OrganizationService OrganizationService
@inject UserService UserService
@inject IJSRuntime JSRuntime
@inject IUserStore<ApplicationUser> UserStore

<PageTitle>Register - Peptide Data Homogenizer</PageTitle>

@if (loading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Verifying registration token...</p>
    </div>
}
else if (invalidToken)
{
    <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">Invalid Registration Token</h4>
        <p>The registration token provided is invalid or has expired. Please check the link or contact support.</p>
        <hr />
        <p class="mb-0">If you believe this is an error, please reach out to our support team.</p>
    </div>
}
else
{
    <div class="min-vh-80 d-flex align-items-center py-5">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-md-12 col-lg-12 col-xl-12">
                    <div class="text-center mb-5">
                        <div class="d-inline-block bg-primary rounded-circle p-3 mb-3 shadow">
                            <i class="bi bi-person-plus text-white fs-1"></i>
                        </div>
                        <h1 class="display-5 fw-bold text-primary mb-2">Peptide Data Homogenizer</h1>
                        <p class="text-muted">Create your research account</p>
                    </div>

                    <div class="card shadow-lg border-0 rounded-3 overflow-hidden">
                        <div class="card-body p-4 p-md-5">
                            <div class="text-center mb-4">
                                <h2 class="h4 fw-bold">Create new account</h2>
                                <p class="text-muted">Start your peptide research journey</p>
                            </div>

                            @if (InvitationOrganization != null)
                            {
                                <div class="text-center mb-4">
                                    <img src="data:@InvitationOrganization.ContentType;base64,@(Convert.ToBase64String(InvitationOrganization.LogoData))" alt="@InvitationOrganization.Name Logo"
                                            class="img-fluid rounded-circle mb-2" style="max-width: 100px; max-height: 100px;" />
                                    <h3 class="h5 fw-bold text-primary">
                                        @InvitationOrganization.Name
                                    </h3>
                                    <p class="text-muted">
                                        You are invited to join this organization. Please complete your registration to access its resources.
                                    </p>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(Message))
                            {
                                <div class="alert alert-danger" role="alert">@Message</div>
                            }

                                <div class="mb-3">
                                    <label class="form-label">Email address</label>
                                    <div class="form-control form-control-lg bg-light">
                                        @email
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">First Name</label>
                                    <InputText @bind-Value="firstName" class="form-control form-control-lg" aria-required="true" placeholder="John" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Last Name</label>
                                    <InputText @bind-Value="lastName" class="form-control form-control-lg" aria-required="true" placeholder="Doe" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Title</label>
                                    <InputSelect @bind-Value="title" class="form-select form-select-lg">
                                        <option disabled value="">Select Title</option>
                                        <option value="Dr.">Dr.</option>
                                        <option value="Professor">Professor</option>
                                        <option value="Master">Master</option>
                                        <option value="PhD">PhD</option>
                                        <option value="Bachelor">Bachelor</option>
                                        <option value=""> - </option>
                                    </InputSelect>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Password</label>
                                    <InputText type="password" @bind-Value="password" class="form-control form-control-lg" autocomplete="new-password" aria-required="true" placeholder="••••••••" />

                                    <div class="form-text">Use 8 or more characters with a mix of letters, numbers & symbols</div>
                                </div>

                                <div class="mb-4">
                                    <label class="form-label">Confirm Password</label>
                                    <InputText type="password" @bind-Value="confirmPassword" class="form-control form-control-lg" autocomplete="new-password" aria-required="true" placeholder="••••••••" />
                                </div>

                            <button type="button" @onclick="RegisterUser" class="btn btn-primary btn-lg w-100 mb-3">
                                    <i class="bi bi-person-plus me-2"></i>Create Account
                                </button>

                                <div class="text-center mt-4 pt-2 border-top">
                                    <p class="small mb-0">
                                        Already have an account?
                                        <a href="@(NavigationManager.GetUriWithQueryParameters("Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
                                            class="text-decoration-none fw-semibold">
                                            Sign in here
                                        </a>
                                    </p>
                                </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public long? Token { get; set; }

    private bool loading = true;
    private bool invalidToken = false;
    private string? Message;

    private string email = "";
    private string firstName = "";
    private string lastName = "";
    private string title = "";
    private string password = "";
    private string confirmPassword = "";
    private string? ReturnUrl;

    private ApplicationUser? applicationUser;
    private Organization? InvitationOrganization;

    protected override async Task OnInitializedAsync()
    {
        if (!Token.HasValue || Token.Value <= 0)
        {
            invalidToken = true;
            loading = false;
            return;
        }

        try
        {
            applicationUser = await UserService.GetUserByRegistrationTokenAsync(Token.Value);
            if (applicationUser == null)
            {
                invalidToken = true;
                Message = "Invalid registration token.";
            }
            else if (applicationUser.HasRegistered)
            {
                NavigationManager.NavigateTo("/Login");
                return;
            }
            else if (applicationUser.RegistrationTokenExpiration == null ||
                        applicationUser.RegistrationTokenExpiration < DateTime.Now)
            {
                invalidToken = true;
                Message = applicationUser.RegistrationTokenExpiration == null
                    ? "This registration token has no expiration date."
                    : "This registration token has expired.";
            }
            else
            {
                var organizations = await OrganizationService.GetOrganizationsByUserIdAsync(applicationUser.Id);
                if (organizations.Count == 0)
                {
                    invalidToken = true;
                    Message = "You must be invited to an organization before registering.";
                    return;
                }
                InvitationOrganization = organizations.FirstOrDefault();
                email = applicationUser.Email;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during registration token validation");
            invalidToken = true;
            Message = "An error occurred while validating your token.";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task RegisterUser()
    {
        Message = null;

        if (applicationUser == null)
        {
            invalidToken = true;
            Message = "Invalid registration token.";
            return;
        }
        if (string.IsNullOrWhiteSpace(firstName) || firstName.Length < 2 ||
            string.IsNullOrWhiteSpace(lastName) || lastName.Length < 2)
        {
            Message = "First Name and Last Name must be at least 2 characters long.";
            return;
        }
        if (string.IsNullOrWhiteSpace(password) || password.Length < 6)
        {
            Message = "Password must be at least 6 characters long.";
            return;
        }
        if (password != confirmPassword)
        {
            Message = "The password and confirmation password do not match.";
            return;
        }

        try
        {
            applicationUser.FirstName = firstName;
            applicationUser.LastName = lastName;
            applicationUser.Title = title;
            applicationUser.HasRegistered = true;
            applicationUser.EmailConfirmed = true;
            applicationUser.UserName = applicationUser.ExtendedFullName.Replace(" ","_");
            await UserStore.SetUserNameAsync(applicationUser, applicationUser.UserName, CancellationToken.None);

            var removePasswordResult = await UserManager.RemovePasswordAsync(applicationUser);
            if (!removePasswordResult.Succeeded)
            {
                Message = string.Join(", ", removePasswordResult.Errors.Select(e => e.Description));
                return;
            }

            var addPasswordResult = await UserManager.AddPasswordAsync(applicationUser, password);
            if (!addPasswordResult.Succeeded)
            {
                Message = string.Join(", ", addPasswordResult.Errors.Select(e => e.Description));
                return;
            }

            var updateResult = await UserManager.UpdateAsync(applicationUser);
            if (!updateResult.Succeeded)
            {
                Message = string.Join(", ", updateResult.Errors.Select(e => e.Description));
                return;
            }

            Logger.LogInformation("User {Email} completed registration with token.", applicationUser.Email);

            if (UserManager.Options.SignIn.RequireConfirmedAccount)
            {
                RedirectManager.RedirectTo("Account/RegisterConfirmation");
                return;
            }

            //await SignInManager.SignInAsync(applicationUser, isPersistent: true);
            NavigationManager.NavigateTo("", forceLoad: true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during user registration");
            Message = "An error occurred during registration.";
        }
    }
}