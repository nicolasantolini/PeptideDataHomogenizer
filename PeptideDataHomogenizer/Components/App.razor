<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="@Assets["lib/bootstrap/dist/css/bootstrap.min.css"]" />
    <link rel="stylesheet" href="@Assets["app.css"]" />
    <link href="@Assets["PeptideDataHomogenizer.styles.css"]" rel="stylesheet">

    <link rel="stylesheet" href="lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="_framework/scoped.styles.css" />
    <link rel="stylesheet" href="PeptideDataHomogenizer.styles.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/font/bootstrap-icons.css">
    <!-- wwwroot/index.html or Pages/_Layout.cshtml -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <ImportMap />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js"></script>

    <script>
        window.scrollToHighlight = function(index) {
            const activeElement = document.querySelector(`.highlight-active[data-index="${index}"]`);
            if (activeElement) {
                activeElement.scrollIntoView({
                    behavior: 'smooth',
                    block: 'center'
                });
            }
        };
    </script>

    <script>
        window.downloadFileFromText = function(fileName, text, mimeType) {
            const blob = new Blob([text], { type: mimeType });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = fileName;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        };
    </script>

    <script>
            window.methods = {
                    CreateCookie: function (name, value, days) {
                var expires = "";
                if (days) {
                    var date = new Date();
                    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                    expires = "; expires=" + date.toUTCString();
                }

                var secureFlag = window.location.protocol === 'https:' ? "; Secure" : "";

                // Critical additions:
                document.cookie = `${name}=${encodeURIComponent(value)}` +
                                  `${expires}` +
                                  "; path=/" +
                                  "; SameSite=Lax" +
                                  `${secureFlag}`;
            },
            GetCookie: function (name) {
                var nameEQ = name + "=";
                var ca = document.cookie.split(';');
                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0) == ' ') c = c.substring(1);
                    if (c.indexOf(nameEQ) == 0) return decodeURIComponent(c.substring(nameEQ.length, c.length));  // Decode the value when retrieving
                }
                return "";
            }
        }
    </script>

    <script>
            window.downloadFileFromUrl = (url, fileName) => {
            const link = document.createElement('a');
            link.href = url;
            link.download = fileName || 'image.png';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        };
    </script>

    <script>
                    function setupColumnResizing() {
            const table = document.getElementById('resizableTable');
            if (!table) return;

            const headers = table.querySelectorAll('th');

            headers.forEach(header => {
                const resizer = document.createElement('div');
                resizer.classList.add('column-resizer');
                header.appendChild(resizer);

                let startX, startWidth;

                resizer.addEventListener('mousedown', (e) => {
                    e.preventDefault();
                    startX = e.clientX;
                    startWidth = header.offsetWidth;

                    document.addEventListener('mousemove', handleMouseMove);
                    document.addEventListener('mouseup', stopResize);
                });

                function handleMouseMove(e) {
                    const width = startWidth + e.clientX - startX;
                    header.style.minWidth = `${width}px`;
                    header.style.width = `${width}px`;
                }

                function stopResize() {
                    document.removeEventListener('mousemove', handleMouseMove);
                    document.removeEventListener('mouseup', stopResize);
                }
            });
        }
    </script>

    <script>
        //implement the method "downloadImageFromDb", fileName, image.ImageData, image.ContentType
        window.downloadImageFromDb = function(fileName, imageData, contentType) {
            const link = document.createElement('a');
            link.href = `data:${contentType};base64,${imageData}`;
            link.download = fileName || 'image.png';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        };
    </script>

</body>


</html>
