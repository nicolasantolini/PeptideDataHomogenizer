@page "/manage-discredited-journals"
@using Entities
@using Microsoft.AspNetCore.Identity
@using PeptideDataHomogenizer.Data
@using PeptideDataHomogenizer.Services
@using PeptideDataHomogenizer.State
@using SuperSimpleBlazorModal
@inject JournalsService JournalsService
@inject DatabaseDataHandler DatabaseDataHandler
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject UserProjectService UserProjectService
@inject ArticleModerationService ArticleModerationService

@rendermode InteractiveServer

<h3 class="mb-4">Manage Discredited Journals</h3>

@if (isRenderingPage)
{
    <div class="loading-progress">
        <div class="spinner"></div>
        <p>Loading...</p>
    </div>
}
else if(errorMessage != string.Empty)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else{

<div class="card shadow-sm">
    <div class="card-header bg-light">
        <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center gap-2">
                <h5 class="mb-0">Discredited Journal List</h5>
                <span class="info-tooltip" tabindex="0">
                    <i class="bi bi-info-circle text-info" style="cursor: pointer;"></i>
                    <span class="info-tooltip-text">
                        To discredit a journal means that when a new article is obtained from the PubMed query search, if its Journal name matches exactly the name of a discredit Journal, then that article will be automatically discredited. Journals are discredited at a project level.
                    </span>
                </span>
            </div>
            <button class="btn btn-primary btn-sm" @onclick="ShowAddModal" disabled="@(UserRole == "visitor")">
                <i class="bi bi-plus-lg"></i> Add Journal
            </button>
        </div>

        
    </div>

    <div class="card-body">
        @if (journals == null)
        {
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (!journals.Any())
        {
            <div class="alert alert-info">
                No discredited journals found. Add one to get started.
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>Journal Title</th>
                            <th>Discredited Reason</th>
                            <th>Discredited By</th>
                            <th width="120px">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var journal in journals)
                        {
                            <tr>
                                <td>@journal.Title</td>
                                <td>@journal.DiscreditedReason</td>
                                <td>@GetExtendedNameByUserId(journal.DiscreditedById).Result</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-secondary me-1"
                                                @onclick="() => ShowEditModal(journal)" disabled="@(UserRole == "visitor")">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger"
                                                @onclick="() => ShowDeleteModal(journal)" disabled="@(UserRole == "visitor")">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

}



<SimpleModal @ref="journalModalRef"
                Id="journal-modal"
                ExtraCssClass=""
                OpenOnFirstRender="false">
    <div class="modal-header">
        <h5 class="modal-title">@(isEditing ? "Edit Journal" : "Add New Journal")</h5>
        <button type="button" class="btn-close" @onclick="CloseJournalModal" aria-label="Close"></button>
    </div>
    <div class="modal-body">
        @if (showRetroactiveOption)
        {
            <div class="alert alert-warning">
                <p>Do you want to retroactively discredit articles from this journal?</p>
                <div class="form-check">
                    <button type="button" class="btn btn-secondary me-2" @onclick="() => HandleValidSubmit(true)">Yes, retroactively</button>
                    <button type="button" class="btn btn-primary" @onclick="() => HandleValidSubmit(false)">No, just save</button>
                </div>
            </div>
        }
        else
        {
            <EditForm Model="currentJournal">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label for="journalTitle" class="form-label">Journal Title *</label>
                    <InputText id="journalTitle" class="form-control" @bind-Value="currentJournal.Title" />
                </div>
                <div class="mb-3">
                    <label for="journalDescription" class="form-label">Reason to Discredit:</label>
                    <InputTextArea id="journalDescription" class="form-control" @bind-Value="currentJournal.DiscreditedReason" />
                </div>
                <div class="d-flex justify-content-end gap-2">
                    <button type="button" class="btn btn-secondary" @onclick="CloseJournalModal">Cancel</button>
                    <button type="button" @onclick="ToggleRetroactiveOption" class="btn btn-primary">
                        @(isEditing ? "Update" : "Save")
                    </button>
                </div>
            </EditForm>
        }
        
    </div>
</SimpleModal>

<SimpleModal @ref="deleteModalRef"
                Id="delete-modal"
                ExtraCssClass=""
                OpenOnFirstRender="false">
    <div class="modal-header bg-danger text-white">
        <h5 class="modal-title">Confirm Deletion</h5>
        <button type="button" class="btn-close btn-close-white" @onclick="CloseDeleteModal" aria-label="Close"></button>
    </div>
    <div class="modal-body">
        <p>Are you sure you want to delete the journal <strong>@journalToDelete?.Title</strong>?</p>
        <p class="text-danger">This action cannot be undone.</p>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
        <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
    </div>
</SimpleModal>

@code {
    private List<DiscreditedJournal> journals;
    private DiscreditedJournal currentJournal = new();
    private DiscreditedJournal journalToDelete;
    private bool isEditing;
    private string originalTitle;

    private SimpleModal journalModalRef;
    private SimpleModal deleteModalRef;

    private ApplicationUser currentUser;

    private string errorMessage = string.Empty;

    private int? ProjectId = 0;

    private bool isRenderingPage = true;
    private string UserRole = string.Empty;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isRenderingPage = true;
            currentUser = await UserManager.GetUserAsync((await AuthenticationStateProvider.GetAuthenticationStateAsync()).User);
            if (currentUser == null)
            {
                errorMessage = "You must be logged in to manage discredited journals.";
                isRenderingPage = false;
                StateHasChanged();
                return;
            }

            ProjectId = await ProjectCookieManager.GetProjectAsync(JSRuntime);
            if (ProjectId == null || ProjectId <= 0)
            {
                errorMessage = "No project selected. Please select a project to manage discredited journals.";
                isRenderingPage = false;
                StateHasChanged();
                return;
            }
            await LoadJournals();

            UserRole = await UserProjectService.GetRoleByProjectIdAndUserIdAsync(ProjectId.Value, currentUser.Id);
            var roles = await UserManager.GetRolesAsync(currentUser);

            if (roles.Contains("Admin") || roles.Contains("SuperAdmin"))
                UserRole = "admin";
            if (UserRole == "")
            {
                errorMessage = "You do not have permission to view discredited journals for this project.";
                isRenderingPage = false;
                StateHasChanged();
                return;
            }

            isRenderingPage = false;
            StateHasChanged();
        }
    }

    private async Task<string> GetExtendedNameByUserId(string id)
    {
        var user = await UserManager.FindByIdAsync(id);
        return user?.ExtendedFullName ?? "Unknown User";
    }


    private async Task LoadJournals()
    {
        journals = await JournalsService.GetDiscreditedJournalsAsync(ProjectId.Value);
        if (journals == null)
        {
            journals = new List<DiscreditedJournal>();
        }
        StateHasChanged();
    }

    private void ShowAddModal()
    {
        isEditing = false;
        currentJournal = new DiscreditedJournal();
        journalModalRef?.ShowModal();
    }

    private void ShowEditModal(DiscreditedJournal journal)
    {
        isEditing = true;
        originalTitle = journal.Title;
        currentJournal = new DiscreditedJournal { Title = journal.Title };
        journalModalRef?.ShowModal();
    }

    private bool showRetroactiveOption = false;

    private void ToggleRetroactiveOption()
    {
        showRetroactiveOption = !showRetroactiveOption;
    }
    private async Task HandleValidSubmit(bool retroActive)
    {
        showRetroactiveOption = false;
        currentJournal.ProjectId = ProjectId.Value;
        currentJournal.DiscreditedById = currentUser.Id;

        if(retroActive)
        {
            await ArticleModerationService.DiscreditArticlesByJournalAndProjectIdAsync(currentJournal.Title, ProjectId.Value);
        }

        await JournalsService.UpsertDiscreditedJournalAsync(currentJournal);
        await LoadJournals();
        journalModalRef?.CloseModal();
        StateHasChanged();
    }

    private void ShowDeleteModal(DiscreditedJournal journal)
    {
        journalToDelete = journal;
        deleteModalRef?.ShowModal();
    }

    private async Task ConfirmDelete()
    {
        if (journalToDelete != null)
        {
            await DatabaseDataHandler.DeleteAsync<DiscreditedJournal>(journalToDelete);
            await LoadJournals();
        }
        deleteModalRef?.CloseModal();
        StateHasChanged();
    }

    private void CloseJournalModal()
    {
        journalModalRef?.CloseModal();
    }

    private void CloseDeleteModal()
    {
        deleteModalRef?.CloseModal();
    }
}