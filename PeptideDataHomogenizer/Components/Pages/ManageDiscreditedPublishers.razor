@page "/manage-discredited-publishers"
@using Entities
@using Microsoft.AspNetCore.Identity
@using PeptideDataHomogenizer.Data
@using PeptideDataHomogenizer.Services
@using PeptideDataHomogenizer.State
@using SuperSimpleBlazorModal
@inject DatabaseDataHandler DatabaseDataHandler
@inject PublishersService PublishersService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject UserProjectService UserProjectService

@rendermode InteractiveServer

<h3 class="mb-4">Manage Discredited Publishers</h3>

@if (isRenderingPage)
{
    <div class="loading-progress">
        <div class="spinner"></div>
        <p>Loading...</p>
    </div>
}
else if(errorMessage != string.Empty)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else{


<div class="card shadow-sm">
    <div class="card-header bg-light">
        <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center gap-2">
                <h5 class="mb-0">Discredited Publishers List</h5>
                <span class="info-tooltip" tabindex="0">
                    <i class="bi bi-info-circle text-info" style="cursor: pointer;"></i>
                    <span class="info-tooltip-text">
                        To discredit a publisher means that when the full text of an article is being fetched, if the url on which the full text was found CONTAINS the name of a discredit Publisher, then that article will be automatically discredited. Publishers are discredited at a project level.
                        <br />
                        Example: to discredit all article from MDPI, then find an invariant part of the URL to recognize such publisher (in this case, "mdpi.com")
                    </span>
                </span>

                </div>
            <button class="btn btn-primary btn-sm" @onclick="ShowAddModal" disabled="@(UserRole == "visitor")">
                <i class="bi bi-plus-lg"></i> Add Publisher
            </button>
        </div>
    </div>

    <div class="card-body">
        @if (publishers == null)
        {
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (!publishers.Any())
        {
            <div class="alert alert-info">
                No discredited publishers found. Add one to get started.
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>Publisher URL</th>
                            <th width="120px">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var publisher in publishers)
                        {
                            <tr>
                                <td>@publisher.Url</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-secondary me-1"
                                                @onclick="() => ShowEditModal(publisher)" disabled="@(UserRole == "visitor")">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger"
                                                @onclick="() => ShowDeleteModal(publisher)" disabled="@(UserRole == "visitor")">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

}

<SimpleModal @ref="publisherModalRef"
             Id="publisher-modal"
             ExtraCssClass=""
             OpenOnFirstRender="false">
    <div class="modal-header">
        <h5 class="modal-title">@(isEditing ? "Edit Publisher" : "Add New Publisher")</h5>
        <button type="button" class="btn-close" @onclick="ClosePublisherModal" aria-label="Close"></button>
    </div>
    <div class="modal-body">
        <EditForm Model="currentPublisher" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="publisherUrl" class="form-label">Publisher URL *</label>
                <InputText id="publisherUrl" class="form-control" @bind-Value="currentPublisher.Url" />
                <ValidationMessage For="@(() => currentPublisher.Url)" />
            </div>
            <div class="d-flex justify-content-end gap-2">
                <button type="button" class="btn btn-secondary" @onclick="ClosePublisherModal">Cancel</button>
                <button type="submit" class="btn btn-primary">
                    @(isEditing ? "Update" : "Save")
                </button>
            </div>
        </EditForm>
    </div>
</SimpleModal>

<SimpleModal @ref="deleteModalRef"
             Id="delete-modal"
             ExtraCssClass=""
             OpenOnFirstRender="false">
    <div class="modal-header bg-danger text-white">
        <h5 class="modal-title">Confirm Deletion</h5>
        <button type="button" class="btn-close btn-close-white" @onclick="CloseDeleteModal" aria-label="Close"></button>
    </div>
    <div class="modal-body">
        <p>Are you sure you want to delete the publisher <strong>@publisherToDelete?.Url</strong>?</p>
        <p class="text-danger">This action cannot be undone.</p>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
        <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
    </div>
</SimpleModal>

@code {
    private List<DiscreditedPublisher> publishers;
    private DiscreditedPublisher currentPublisher = new();
    private DiscreditedPublisher publisherToDelete;
    private bool isEditing;
    private int originalId;

    private SimpleModal publisherModalRef;
    private SimpleModal deleteModalRef;

    private string errorMessage = string.Empty;
    private bool isRenderingPage = true;

    private string UserRole = string.Empty;
    private ApplicationUser currentUser;
    private int? ProjectId = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isRenderingPage = true;
            currentUser = await UserManager.GetUserAsync((await AuthenticationStateProvider.GetAuthenticationStateAsync()).User);
            if (currentUser == null)
            {
                errorMessage = "You must be logged in to manage discredited publishers.";
                isRenderingPage = false;
                StateHasChanged();
                return;
            }

            ProjectId = await ProjectCookieManager.GetProjectAsync(JSRuntime);
            if (ProjectId == null || ProjectId <= 0)
            {
                errorMessage = "No project selected. Please select a project to manage discredited publishers.";
                isRenderingPage = false;
                StateHasChanged();
                return;
            }
            await LoadPublishers();

            UserRole = await UserProjectService.GetRoleByProjectIdAndUserIdAsync(ProjectId.Value, currentUser.Id);
            var roles = await UserManager.GetRolesAsync(currentUser);

            if (roles.Contains("Admin") || roles.Contains("SuperAdmin"))
                UserRole = "admin";
            if (UserRole == "")
            {
                errorMessage = "You do not have permission to view discredited publishers for this project.";
                isRenderingPage = false;
                StateHasChanged();
                return;
            }

            isRenderingPage = false;
            StateHasChanged();
        }
    }

    private async Task<string> GetExtendedNameByUserId(string id)
    {
        var user = await UserManager.FindByIdAsync(id);
        return user?.ExtendedFullName ?? "Unknown User";
    }


    private async Task LoadPublishers()
    {
        publishers = await DatabaseDataHandler.GetAsync<DiscreditedPublisher>();
    }

    private void ShowAddModal()
    {
        isEditing = false;
        currentPublisher = new DiscreditedPublisher();
        publisherModalRef?.ShowModal();
    }

    private void ShowEditModal(DiscreditedPublisher publisher)
    {
        isEditing = true;
        originalId = publisher.Id;
        currentPublisher = new DiscreditedPublisher
        {
            Id = publisher.Id,
            Url = publisher.Url
        };
        publisherModalRef?.ShowModal();
    }

    private async Task HandleValidSubmit()
    {
        currentPublisher.ProjectId = ProjectId.Value;
        if (isEditing)
        {
            // Find the original publisher by ID, update and save
            var existing = await DatabaseDataHandler.GetByIdAsync<DiscreditedPublisher>(originalId);
            if (existing != null)
            {
                existing.Url = currentPublisher.Url;
                await DatabaseDataHandler.UpdateAsync(existing);
            }
        }
        else
        {
            await DatabaseDataHandler.AddAsync(currentPublisher);
        }

        await LoadPublishers();
        publisherModalRef?.CloseModal();
        StateHasChanged();
    }

    private void ShowDeleteModal(DiscreditedPublisher publisher)
    {
        publisherToDelete = publisher;
        deleteModalRef?.ShowModal();
    }

    private async Task ConfirmDelete()
    {
        if (publisherToDelete != null)
        {
            await DatabaseDataHandler.DeleteAsync<DiscreditedPublisher>(publisherToDelete);
            await LoadPublishers();
        }
        deleteModalRef?.CloseModal();
        StateHasChanged();
    }

    private void ClosePublisherModal()
    {
        publisherModalRef?.CloseModal();
    }

    private void CloseDeleteModal()
    {
        deleteModalRef?.CloseModal();
    }
}