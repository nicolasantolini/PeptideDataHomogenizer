@page "/manage-organization"
@using Entities
@using Microsoft.AspNetCore.Identity
@using PeptideDataHomogenizer.Components.Account.Shared
@using PeptideDataHomogenizer.Components.SharedComponents
@using PeptideDataHomogenizer.Data
@using PeptideDataHomogenizer.Services
@using PeptideDataHomogenizer.State
@attribute [Authorize]
@inject OrganizationService OrganizationService
@inject UserOrganizationService UserOrganizationService
@inject IJSRuntime JSRuntime
@inject DatabaseDataHandler DatabaseDataHandler
@inject IWebHostEnvironment Environment
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Manage Organization</PageTitle>

@if (isRenderingPage)
{
<div class="loading-progress">
    <div class="spinner"></div>
    <p>Loading...</p>
</div>
}
else if(errorMessage != string.Empty)
{
<div class="alert alert-danger" role="alert">
    @errorMessage
</div>
}
else
{
    <div class="container-fluid px-4">
        @if (CurrentOrganization == null)
        {
            <div class="d-flex justify-content-center align-items-center" style="height: 80vh;">
                <div class="text-center">
                    <i class="bi bi-building-slash" style="font-size: 3rem; color: #6c757d;"></i>
                    <h3 class="mt-3">No Organization Selected</h3>
                    <p class="text-muted">Please select an organization from the header of the page to manage it.</p>
                </div>
            </div>
        }
        else
        {
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="mt-4">
                    <i class="bi bi-building-gear me-2"></i>Manage Organization
                </h1>
                <div class="d-flex gap-2">
            <button @onclick="() => ShowFullImage((CurrentOrganization.ContentType, CurrentOrganization.LogoData))"
                            class="btn btn-outline-secondary"
                            disabled="@(CurrentOrganization.LogoData == null || CurrentOrganization.LogoData.Length==0 )">
                        <i class="bi bi-image"></i> View Logo
                    </button>
                </div>
        <div class="d-flex gap-2">
            <button @onclick="() => LeaveOrganization(CurrentOrganization.Id)"
                    class="btn btn-danger">
                <i class="bi bi-image"></i> LeaveProject
            </button>
        </div>
                @code {
            private async Task LeaveOrganization(int currentOrganizationId)
            {
                //js confirm
                var userPerOrganization = await UserOrganizationService.GetRoleByOrganizationIdAndUserIdAsync(currentOrganizationId, user.Id);
                if (string.IsNullOrEmpty(userPerOrganization))
                {
                    SetStatusMessage("You are not a member of this organization.", false);
                    return;
                }
                var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to leave this project?");
                if (!confirmed)
                    return;
                await UserOrganizationService.RemoveUserFromOrganizationAsync(user.Id, currentOrganizationId);
                await ContextCookieManager.SetContextAsync(JSRuntime, 0);
                await ProjectCookieManager.SetProjectAsync(JSRuntime, 0);
                SetStatusMessage("You have successfully left the organization.", true);
                // Redirect to the projects page
                NavigationManager.NavigateTo("/");

            }
        }
            </div>

            @if (!string.IsNullOrEmpty(StatusMessage))
            {
                <div class="alert @StatusMessageClass alert-dismissible fade show" role="alert">
                    @StatusMessage
                    <button type="button" class="btn-close" @onclick="ClearStatusMessage"></button>
                </div>
            }

            <div class="card mb-4">
                <div class="card-body">
                    @if (UserRole == "admin")
                    {
                        <EditForm Model="@CurrentOrganization">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="name" class="form-label">Organization Name</label>
                                        <InputText id="name" @bind-Value="CurrentOrganization.Name" class="form-control" />
                                        <ValidationMessage For="@(() => CurrentOrganization.Name)" />
                                    </div>
                                    <div class="mb-3">
                                        <label for="description" class="form-label">Description</label>
                                        <InputTextArea id="description" @bind-Value="CurrentOrganization.Description"
                                                       class="form-control" rows="5" />
                                        <ValidationMessage For="@(() => CurrentOrganization.Description)" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Organization Logo</label>
                                        <div class="border rounded p-3 text-center">
                                            <div class="mb-3 d-flex justify-content-center">
                                                @if (!string.IsNullOrEmpty(LogoPreviewUrl))
                                                {
                                                    <img src="@LogoPreviewUrl" class="rounded-circle border"
                                                         style="width: 150px; height: 150px; object-fit: contain; background-color: #f8f9fa;"
                                                         @onclick="() => ShowFullImage(LogoPreviewUrl)" />
                                                }
                                                else if (CurrentOrganization.LogoData!=null && CurrentOrganization.LogoData.Length>0)
                                                {
                                                    <img src="data:@CurrentOrganization.ContentType;base64,@(Convert.ToBase64String(CurrentOrganization.LogoData))" class="rounded-circle border"
                                                         style="width: 150px; height: 150px; object-fit: contain; background-color: #f8f9fa;"
                                                         @onclick="() => ShowFullImage((CurrentOrganization.ContentType,CurrentOrganization.LogoData))" />
                                                }
                                                else
                                                {
                                                    <div class="rounded-circle border d-flex justify-content-center align-items-center"
                                                         style="width: 150px; height: 150px; background-color: #f8f9fa;">
                                                        <i class="bi bi-building text-secondary" style="font-size: 3rem;"></i>
                                                    </div>
                                                }
                                            </div>
                                            <InputFile OnChange="HandleLogoChangeAsync" class="form-control" accept="image/*" />
                                            <div class="form-text">Max size: 10MB. Recommended: 300x300px square image</div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="mt-4">
                                <h5><i class="bi bi-people me-2"></i>Organization Members</h5>
                                <OrganizationUsersManager CurrentOrganization="CurrentOrganization" UserRole="@UserRole" />
                            </div>

                            <div class="d-flex justify-content-end gap-2 mt-4">
                                <button type="button" class="btn btn-outline-secondary" @onclick="ResetForm">
                                    <i class="bi bi-arrow-counterclockwise"></i> Reset
                                </button>
                                <button type="button" @onclick="HandleValidSubmit" class="btn btn-primary">
                                    <i class="bi bi-save"></i> Save Changes
                                </button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Organization Name</label>
                                    <div class="form-control-plaintext">@CurrentOrganization.Name</div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <div class="form-control-plaintext">@CurrentOrganization.Description</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Organization Logo</label>
                                    <div class="border rounded p-3 text-center">
                                        <div class="mb-3 d-flex justify-content-center">
                                            @if (!string.IsNullOrEmpty(LogoPreviewUrl))
                                            {
                                                <img src="@LogoPreviewUrl" class="rounded-circle border"
                                                     style="width: 150px; height: 150px; object-fit: contain; background-color: #f8f9fa;"
                                                     @onclick="() => ShowFullImage(LogoPreviewUrl)" />
                                            }
                                            else if (CurrentOrganization.LogoData != null && CurrentOrganization.LogoData.Length > 0)
                                            {
                                                <img src="data:@CurrentOrganization.ContentType;base64,@(Convert.ToBase64String(CurrentOrganization.LogoData))" class="rounded-circle border"
                                                     style="width: 150px; height: 150px; object-fit: contain; background-color: #f8f9fa;"
                                                     @onclick="() => ShowFullImage((CurrentOrganization.ContentType, CurrentOrganization.LogoData))" />
                                            }
                                            else
                                            {
                                                <div class="rounded-circle border d-flex justify-content-center align-items-center"
                                                     style="width: 150px; height: 150px; background-color: #f8f9fa;">
                                                    <i class="bi bi-building text-secondary" style="font-size: 3rem;"></i>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="mt-4">
                            <h5><i class="bi bi-people me-2"></i>Organization Members</h5>
                            <OrganizationUsersManager CurrentOrganization="CurrentOrganization" UserRole="@UserRole" />
                        </div>
                    }
                </div>
            </div>
        }
    </div>

<FullImage FullImageUrl="@FullImageUrl" OnCloseFullImage="CloseFullImage" />
}
@code {
    private Organization? CurrentOrganization;
    private string StatusMessage = string.Empty;
    private string StatusMessageClass = "alert-success";
    private IBrowserFile? LogoFile;
    private string? LogoPreviewUrl;
    private (string contentType, byte[] imageData)? FullImageUrl;
    private Organization? OriginalOrganizationState;
    private ApplicationUser? user;

    private string errorMessage = string.Empty;

    private string UserRole = "";
    private bool isRenderingPage = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isRenderingPage = true;
            var currentOrganizationContextId = await ContextCookieManager.GetContextAsync(JSRuntime);
            if (currentOrganizationContextId.HasValue)
            {
                CurrentOrganization = await DatabaseDataHandler.GetByIdAsync<Organization>(currentOrganizationContextId.Value);
                if(CurrentOrganization == null)
                {
                    errorMessage = "Organization not found. Please select a valid organization.";
                    SetStatusMessage(errorMessage, false);
                    isRenderingPage = false;
                    StateHasChanged();
                    return;
                }
                OriginalOrganizationState = CloneOrganization(CurrentOrganization);
                user = await UserManager.GetUserAsync((await AuthenticationStateProvider.GetAuthenticationStateAsync()).User);

                UserRole = await UserOrganizationService.GetRoleByOrganizationIdAndUserIdAsync(currentOrganizationContextId.Value, user.Id);

                var roles = await UserManager.GetRolesAsync(user);
                if(roles.Contains("Admin") || roles.Contains("SuperAdmin"))
                {
                    UserRole = "admin";
                }

                if (UserRole == string.Empty)
                {
                    errorMessage = "You do not have permission to manage this organization.";
                    SetStatusMessage(errorMessage, false);
                }
                else
                {
                    errorMessage = string.Empty;
                }

                isRenderingPage = false;

                StateHasChanged();
            }
            else
            {
                errorMessage = "No organization context selected. Please select an organization from the dashboard.";
                SetStatusMessage(errorMessage, false);
                isRenderingPage = false;
                StateHasChanged();
            }
        }
    }

    private Organization CloneOrganization(Organization org)
    {
        return new Organization
        {
            Id = org.Id,
            Name = org.Name,
            Description = org.Description,
            WebsiteUrl = org.WebsiteUrl,
            LogoData = org.LogoData,
            ContentType = org.ContentType
        };
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (UserRole != "admin")
            {
                SetStatusMessage("You do not have permission to update the organization.", false);
                return;
            }
            await OrganizationService.UpdateOrganizationAsync(CurrentOrganization!, LogoFile);
            SetStatusMessage("Organization updated successfully!", true);
            OriginalOrganizationState = CloneOrganization(CurrentOrganization!);
            LogoFile = null;
            LogoPreviewUrl = null;
        }
        catch (Exception ex)
        {
            SetStatusMessage($"Error: {ex.Message}", false);
        }
    }

    private void ResetForm()
    {
        if (UserRole != "admin")
        {
            SetStatusMessage("You do not have permission to reset changes.", false);
            return;
        }
        if (OriginalOrganizationState != null)
        {
            CurrentOrganization = CloneOrganization(OriginalOrganizationState);
            LogoFile = null;
            LogoPreviewUrl = null;
            SetStatusMessage("Changes discarded", false);
        }
    }

    private async Task HandleLogoChangeAsync(InputFileChangeEventArgs e)
    {
        if (UserRole != "admin")
        {
            SetStatusMessage("You do not have permission to change the logo.", false);
            return;
        }
        LogoFile = e.File;
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        LogoPreviewUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

        CurrentOrganization.ContentType = format;
        CurrentOrganization.LogoData = buffer;
    }

    private void ShowFullImage((string contentType,byte[] imageData) image)
    {
        FullImageUrl = image;
    }

    private void ShowFullImage(string imageSrcString)
    {
        FullImageUrl = (contentType: "image/png", imageData: Convert.FromBase64String(imageSrcString));
    }

    private void CloseFullImage()
    {
        FullImageUrl = null;
    }

    private void SetStatusMessage(string message, bool isSuccess)
    {
        StatusMessage = message;
        StatusMessageClass = isSuccess ? "alert-success" : "alert-danger";
    }

    private void ClearStatusMessage()
    {
        StatusMessage = string.Empty;
    }

    public void Dispose()
    {
        // Clean up if needed
    }
}