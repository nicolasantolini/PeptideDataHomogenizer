@using Entities
@using Entities.RegexData
@using PeptideDataHomogenizer.Data
@using PeptideDataHomogenizer.Tools
@using PeptideDataHomogenizer.Tools.HtmlTools
@using PeptideDataHomogenizer.Tools.RegexExtractors
@using SuperSimpleBlazorModal
@using System.Text
@using System.Text.RegularExpressions
@using iTextSharp

@inject IFullArticleDownloader FullArticleDownloader
@inject ArticleExtractorFromHtml ArticleExtractorFromHtml
@inject DatabaseDataHandler DatabaseDataHandler
@inject PDBRecordsExtractor PDBRecordsExtractor
@inject IPageFetcher PageFetcher


<SimpleModal @ref="modal"
Id="article-detail-modal"
OnModalStateChange="HandleModalStateChange"
OpenOnFirstRender="false">

    @if (Article != null)
    {
        <div class="modal-header position-relative @(Article.Discredited ? "discredited-header" : "")">
            <style>
            .discredited-header {
                background-color: #ffcccc !important;
            }
            .discredited-body {
                background-color: #ffcccc !important;
            }
            </style>
            <div style="max-width: calc(100% - 150px);">
                <h5 class="modal-title text-wrap pe-2">@Article.Title @(Article.Discredited ? "DISCREDITED" : "")</h5>
            </div>
            <div class="d-flex gap-1">
                <button type="button" disabled="@(Article.Discredited)" class="btn btn-sm btn-primary" @onclick="ExtractProteinData">
                    Extract Protein Data
                </button>
                <button type="button" disabled="@(Article.Discredited)" class="btn btn-sm btn-primary" @onclick="CompleteArticle">
                    Mark Article as Complete
                </button>
                <button type="button" disabled="@(Article.Discredited)" class="btn btn-sm btn-danger" @onclick="ShowDiscreditModal">
                    Discredit
                </button>
                <label class="btn btn-sm btn-outline-primary d-flex align-items-center" for="pdfUpload">
                    <svg width="16" height="16" fill="currentColor" class="me-1" viewBox="0 0 16 16">
                        <path d="M8 6.5a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 10.793V7a.5.5 0 0 1 .5-.5z"/>
                        <path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h6.5L14 4.5zm-3-.5V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V5h-3.5A1.5 1.5 0 0 1 11 4z"/>
                    </svg>
                    Upload PDF
                </label>
                <InputFile disabled="@(Article.Discredited)" id="pdfUpload" style="display:none" OnChange="HandlePdfUpload" accept=".pdf" />
                <button type="button"  class="btn btn-sm btn-close" @onclick="Close" aria-label="Close"></button>
            </div>
        </div>

        <div class="modal-body @(Article.Discredited ? "discredited-body" : "")">
            <div class="row mb-3">
                <div class="col-md-6">
                    <p><strong>Journal:</strong> @Article.Journal</p>
                    <p>
                        <strong>DOI:</strong>
                        @if (!string.IsNullOrEmpty(Article.Doi))
                        {
                            <a href="https://doi.org/@Article.Doi" target="_blank">@Article.Doi</a>
                        }
                        else
                        {
                            <span>Not available</span>
                        }
                    </p>
                    <p>
                        <strong>Publication Date:</strong>
                        @if (Article.PublicationDate!=null)
                        {
                            <span>@Article.PublicationDate.ToString("dd-MM-yyyy")</span>
                        }
                        else
                        {
                            <span>Not available</span>
                        }
                    </p>
                </div>
                <div class="col-md-6">
                    <p><strong>Authors:</strong></p>
                    <p>@Article.Authors</p>
                </div>
            </div>

            <div class="abstract-section mb-3">
                <h6>Abstract</h6>
                <p class="abstract-text">@Article.Abstract</p>
            </div>

            <div class="fulltext-section">
                <h6>Full Text</h6>

                @if (Article.ProteinData.Any())
                {
                    <div class="table-responsive mb-4">
                        <table class="table table-sm table-striped table-bordered align-middle protein-table">
                            <thead class="table-primary">
                                <tr>
                                    <th>Protein ID</th>
                                    <th>Classification</th>
                                    <th>Organism(s)</th>
                                    <th>Method</th>
                                    <th>Software Name</th>
                                    <th>Software Version</th>
                                    <th>Water Model</th>
                                    <th>Force Field</th>
                                    <th>Simulation Method</th>
                                    <th>Temperature (K)</th>
                                    <th>Ions</th>
                                    <th>Ion Concentration (mM)</th>
                                    <th>Simulation Length (ns)</th>
                                    <th>Approved</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var protein in Article.ProteinData)
                                {
                                    <tr>
                                        <td>
                                            <input @onclick="() => HighlightText(protein.ProteinId,0)" 
                                                    @bind="protein.ProteinId"
                                                    class="form-control form-control-sm" />
                                        </td>
                                        <td>
                                            <input @bind="protein.Classification"
                                                    class="form-control form-control-sm" />
                                        </td>
                                        <td>
                                            <input
                                                @bind="protein.Organism"
                                                    class="form-control form-control-sm" />
                                        </td>
                                        <td>
                                            <input
                                                @bind="protein.Method"
                                                    class="form-control form-control-sm" />
                                        </td>
                                        <td>
                                            <input @onclick="() => HighlightText(protein.SoftwareName,1)"
                                                @bind="protein.SoftwareName"
                                                    class="form-control form-control-sm" />
                                        </td>
                                        <td>
                                            <input @onclick="() => HighlightText(protein.SoftwareVersion,9)"
                                                @bind="protein.SoftwareVersion"
                                                    class="form-control form-control-sm" />
                                        </td>
                                        <td>
                                            <input @onclick="() => HighlightText(protein.WaterModel,2)" 
                                                @bind="protein.WaterModel"
                                                    class="form-control form-control-sm" />
                                        </td>
                                        <td>
                                            <input @onclick="() => HighlightText(protein.ForceField,3)"
                                                @bind="protein.ForceField"
                                                    class="form-control form-control-sm" />
                                        </td>
                                        <td>
                                            <input @onclick="() => HighlightText(protein.SimulationMethod,4)" 
                                                @bind="protein.SimulationMethod"
                                                    class="form-control form-control-sm" />
                                        </td>
                                        <td>
                                            <input @onclick="() => HighlightText(protein.Temperature.ToString(System.Globalization.CultureInfo.InvariantCulture),5)" 
                                                @bind="protein.Temperature"
                                                    type="number"
                                                    class="form-control form-control-sm" />
                                        </td>
                                        <td>
                                            <input @onclick="() => HighlightText(protein.Ions,6)" 
                                                @bind="protein.Ions"
                                                    class="form-control form-control-sm" />
                                        </td>
                                        <td>
                                            <input @onclick="() => HighlightText(protein.IonConcentration.ToString(),7)" 
                                                @bind="protein.IonConcentration"
                                                    type="number"
                                                    class="form-control form-control-sm" />
                                        </td>
                                        <td>
                                            <input @onclick="() => HighlightText(protein.SimulationLength.ToString(),8)" 
                                                @bind="protein.SimulationLength"
                                                    type="number"
                                                    class="form-control form-control-sm" />
                                        </td>
                                        <td>
                                            <input type="checkbox" @bind="protein.Approved" />
                                        </td>
                                        <td>
                                            <button class="btn btn-sm btn-danger" 
                                                    @onclick="() => RemoveProtein(protein)">
                                                Remove
                                            </button>
                                        </td>
                                    </tr>
                                }
                                <tr>
                                    <td>
                                        <input @bind="newProtein.ProteinId" 
                                               class="form-control form-control-sm" />
                                    </td>
                                    <td>
                                        <input @bind="newProtein.Classification"
                                               class="form-control form-control-sm" />
                                    </td>
                                    <td>
                                        <input @bind="newProtein.Organism"
                                               class="form-control form-control-sm" />
                                    </td>
                                    <td>
                                        <input @bind="newProtein.Method"
                                               class="form-control form-control-sm" />
                                    </td>
                                    <td>
                                        <input @bind="newProtein.SoftwareName"
                                               class="form-control form-control-sm" />
                                    </td>
                                    <td>
                                        <input @bind="newProtein.SoftwareVersion"
                                               class="form-control form-control-sm" />
                                    </td>
                                    <td>
                                        <input @bind="newProtein.WaterModel"
                                               class="form-control form-control-sm" />
                                    </td>
                                    <td>
                                        <input @bind="newProtein.ForceField"
                                               class="form-control form-control-sm" />
                                    </td>
                                    <td>
                                        <input @bind="newProtein.SimulationMethod"
                                               class="form-control form-control-sm" />
                                    </td>
                                    <td>
                                        <input @bind="newProtein.Temperature"
                                               type="number"
                                               class="form-control form-control-sm" />
                                    </td>
                                    <td>
                                        <input @bind="newProtein.Ions"
                                               class="form-control form-control-sm" />
                                    </td>
                                    <td>
                                        <input @bind="newProtein.IonConcentration"
                                               type="number"
                                               class="form-control form-control-sm" />
                                    </td>
                                    <td>
                                        <input @bind="newProtein.SimulationLength"
                                               type="number"
                                               class="form-control form-control-sm" />
                                    </td>
                                    <td class="text-center">
                                        <input type="checkbox" @bind="newProtein.Approved" />
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-success" 
                                                @onclick="AddProtein">
                                            Add
                                        </button>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                         <div class="mt-2">
                            <button class="btn btn-outline-primary" @onclick="UpdateArticleProteinData">
                                Update All Protein Data
                            </button>

                            <button class="btn btn-outline-success" @onclick="ToggleApproveAllProteins" style="transition: background 0.2s, color 0.2s;">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="me-2" viewBox="0 0 16 16">
                                    @if (AreAllProteinsApproved())
                                    {
                                        <path d="M2 8a6 6 0 1112 0A6 6 0 012 8zm9.354-2.646a.5.5 0 00-.708-.708L7 8.293 5.354 6.646a.5.5 0 10-.708.708l2 2a.5.5 0 00.708 0l4-4z"/>
                                    }
                                    else
                                    {
                                        <path d="M8 15A7 7 0 108 1a7 7 0 000 14zm3.354-8.646a.5.5 0 00-.708-.708L7 9.293 5.354 7.646a.5.5 0 10-.708.708l2 2a.5.5 0 00.708 0l4-4z"/>
                                    }
                                </svg>
                                @if (AreAllProteinsApproved())
                                {
                                    <span>Unmark All as Approved</span>
                                }
                                else
                                {
                                    <span>Mark All as Approved</span>
                                }
                            </button>

                            @code {
                                private void ToggleApproveAllProteins()
                                {
                                if (Article?.ProteinData == null) return;
                                bool approve = !AreAllProteinsApproved();
                                foreach (var protein in Article.ProteinData)
                                {
                                protein.Approved = approve;
                                }
                                }

                                private bool AreAllProteinsApproved()
                                {
                                return Article?.ProteinData != null && Article.ProteinData.Any() && Article.ProteinData.All(p => p.Approved);
                                }
                            }
                            <div class="mt-3">
                                <button class="btn btn-outline-secondary d-flex align-items-center" 
                                        type="button" 
                                        data-bs-toggle="collapse" 
                                        data-bs-target="#combinationGenerator" 
                                        aria-expanded="false" 
                                        aria-controls="combinationGenerator">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-grid-3x3-gap me-2" viewBox="0 0 16 16">
                                        <path d="M4 2v2H2V2h2zm1 12v-2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zm0-5V7a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zm0-5V2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zm5 10v-2a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zm0-5V7a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zm0-5V2a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zM14 4V2a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zm0 5V7a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1zm0 5v-2a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1z"/>
                                    </svg>
                                    Protein Data Combination Generator
                                </button>
                                
                                <div class="collapse mt-3" id="combinationGenerator">
                                    <div class="card card-body bg-light">
                                        <div class="d-flex flex-column">
                                            <h6 class="mb-3 text-primary">Generate combinations with a new value</h6>
                                            
                                            <div class="row g-3 align-items-end">
                                                <div class="col-md-4">
                                                    <label class="form-label mb-1">Select Category:</label>
                                                    <select class="form-select" @bind="combinationCategory">
                                                        <option value="0">Protein ID</option>
                                                        <option value="1">Software Name</option>
                                                        <option value="2">Software Version</option>
                                                        <option value="3">Water Model</option>
                                                        <option value="4">Force Field</option>
                                                        <option value="5">Temperature (K)</option>
                                                        <option value="6">Ions</option>
                                                        <option value="7">Ion Concentration (M)</option>
                                                        <option value="8">Simulation Length (ns)</option>
                                                    </select>
                                                </div>
                                                
                                                <div class="col-md-4">
                                                    <label class="form-label mb-1">New Value:</label>
                                                    @if (IsNumericCategory(combinationCategory))
                                                    {
                                                        <input type="number" step="0.01" class="form-control" @bind="combinationValueNumeric" />
                                                    }
                                                    else
                                                    {
                                                        <input type="text" class="form-control" @bind="combinationValueText" />
                                                    }
                                                </div>
                                                
                                                <div class="col-md-4 d-flex align-items-center">
                                                    <button class="btn btn-primary" @onclick="GenerateCombinations">
                                                        <span class="d-flex align-items-center">
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-braces-asterisk me-2" viewBox="0 0 16 16">
                                                                <path fill-rule="evenodd" d="M1.114 8.063V7.9c1.005-.102 1.497-.615 1.497-1.6V4.503c0-1.094.39-1.538 1.354-1.538h.273V2h-.376C2.25 2 1.49 2.759 1.49 4.352v1.524c0 1.094-.376 1.456-1.49 1.456v1.299c1.114 0 1.49.362 1.49 1.456v1.524c0 1.593.759 2.352 2.372 2.352h.376v-.964h-.273c-.964 0-1.354-.444-1.354-1.538V9.663c0-.984-.492-1.497-1.497-1.6ZM14.886 7.9v.164c-1.005.103-1.497.616-1.497 1.6v1.798c0 1.094-.39 1.538-1.354 1.538h-.273v.964h.376c1.613 0 2.372-.759 2.372-2.352v-1.524c0-1.094.376-1.456 1.49-1.456v-1.3c-1.114 0-1.49-.362-1.49-1.456V4.352C14.51 2.759 13.75 2 12.138 2h-.376v.964h.273c.964 0 1.354.444 1.354 1.538V6.3c0 .984.492 1.497 1.497 1.6ZM7.5 11.5V9.207l-1.621 1.621-.707-.707L6.792 8.5H4.5v-1h2.293L5.172 5.879l.707-.707L7.5 6.792V4.5h1v2.293l1.621-1.621.707.707L9.208 7.5H11.5v1H9.207l1.621 1.621-.707.707L8.5 9.208V11.5h-1Z"/>
                                                            </svg>
                                                            Generate Combinations
                                                        </span>
                                                    </button>
                                                </div>
                                            </div>
                                            
                                            @if (showCombinationResult)
                                            {
                                                <div class="mt-3 p-2 border rounded bg-light">
                                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                                        <span><strong>@combinationCount</strong> new combinations generated</span>
                                                        <button class="btn btn-sm btn-outline-secondary" @onclick="() => showCombinationResult = false">
                                                            Close
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @code{
                        // Combination generator properties
                    private int combinationCategory = 0;
                    private string combinationValueText = "";
                    private double combinationValueNumeric = 0;
                    private bool showCombinationResult = false;
                    private int combinationCount = 0;

                    private bool IsNumericCategory(int category)
                    {
                        return category == 5 || category == 7 || category == 8; // Temperature, IonConc, SimLength
                    }

                    private async Task GenerateCombinations()
                    {
                        if (Article?.ProteinData == null || !Article.ProteinData.Any())
                        {
                            await JSRuntime.InvokeVoidAsync("alert", "No protein data available to create combinations from.");
                            return;
                        }


                        // Get all distinct values for each property
                        var distinctValues = new Dictionary<string, List<object>>();
    
                        // Fixed properties (grouping keys) - except when adding new Protein ID
                        var fixedProps = combinationCategory != 0 
                            ? new[] { "ProteinId", "Classification", "Method", "Organism" }
                            : new[] { "ProteinId" }; // Only group by ProteinId when adding new ones

                        // Variable properties (combination dimensions)
                        var variableProps = new[] { 
                            "SoftwareName",     // 1
                            "SoftwareVersion",  // 2
                            "WaterModel",       // 3
                            "ForceField",       // 4
                            "Temperature",      // 5
                            "Ions",            // 6
                            "IonConcentration", // 7
                            "SimulationLength"  // 8
                        };

                        // Get distinct values for all variable properties
                        foreach (var prop in variableProps)
                        {
                            distinctValues[prop] = Article.ProteinData
                                .Select(p => GetPropertyValue(p, prop))
                                .Distinct()
                                .ToList();
                        }

                          // Group by fixed properties
                        List<IGrouping<dynamic, ProteinData>> proteinGroupsDynamic = null;
                        List<IGrouping<string, ProteinData>> proteinGroupsString = null;

                        if (combinationCategory != 0)
                        {
                            proteinGroupsDynamic = Article.ProteinData
                                .GroupBy(p => new
                                {
                                    p.ProteinId,
                                    p.Classification,
                                    p.Method,
                                    p.Organism
                                })
                                .Cast<IGrouping<dynamic, ProteinData>>()
                                .ToList();
                        }
                        else
                        {
                            proteinGroupsString = Article.ProteinData
                                .GroupBy(p => p.ProteinId)
                                .ToList();
                        }

                        // Group by fixed properties (ProteinId + Classification + Method + Organism)
                        var proteinGroups = Article.ProteinData
                            .GroupBy(p => new {
                                p.ProteinId,
                                p.Classification,
                                p.Method,
                                p.Organism
                            })
                            .ToList();

                        var newCombinations = new List<ProteinData>();

                        foreach (var group in proteinGroups)
                        {
                            // Create base template with fixed properties
                            var baseData = new ProteinData
                            {
                                ArticleDoi = Article.Doi,
                                Approved = false,
                                ProteinId = combinationCategory == 0 ? combinationValueText : group.Key.ProteinId,
                                Classification = group.Key.Classification,
                                Method = group.Key.Method,
                                Organism = group.Key.Organism
                            };

                            // Get distinct values for variable properties from this group
                            var groupData = group.ToList();
                            var variablePropsValues = new Dictionary<string, List<object>>();
    
                            foreach (var prop in variableProps)
                            {
                                variablePropsValues[prop] = groupData
                                    .Select(p => GetPropertyValue(p, prop))
                                    .Distinct()
                                    .ToList();
                            }

                            // Generate all combinations
                            var combinations = new List<Dictionary<string, object>>();
                            combinations.Add(new Dictionary<string, object>());

                            foreach (var prop in variableProps)
                            {
                                var newCombinationsTemp = new List<Dictionary<string, object>>();
        
                                foreach (var value in variablePropsValues[prop])
                                {
                                    foreach (var combo in combinations)
                                    {
                                        var newCombo = new Dictionary<string, object>(combo);
                                        newCombo[prop] = value;
                                        newCombinationsTemp.Add(newCombo);
                                    }
                                }
        
                                combinations = newCombinationsTemp;
                            }

                            // Apply combinations
                            foreach (var combo in combinations)
                            {
                                var newProteinData = new ProteinData(baseData);
        
                                foreach (var kvp in combo)
                                {
                                    SetPropertyValue(newProteinData, kvp.Key, kvp.Value);
                                }

                                // Override the selected combination category if needed
                                if (combinationCategory != 0)
                                {
                                    var propName = variableProps[combinationCategory - 1]; // Adjust index
                                    object value;
                                    if (IsNumericCategory(combinationCategory))
                                    {
                                        value = combinationValueNumeric;
                                    }
                                    else
                                    {
                                        value = combinationValueText;
                                    }

                                    SetPropertyValue(newProteinData, propName, value);
                                }

                                newCombinations.Add(newProteinData);
                            }
                        }
                        var distinctList = newCombinations
                            .GroupBy(x => new
                            {
                                x.ProteinId,
                                x.Classification,
                                SoftwareName = x.SoftwareName?.ToLower(),
                                WaterModel = x.WaterModel?.ToLower(),
                                ForceFieldSoftware = x.ForceField?.ToLower(),
                                SimulationMethod = x.SimulationMethod?.ToLower(),
                                x.Temperature,
                                x.Ions,
                                x.IonConcentration,
                                x.SimulationLength
                            })
                            .Select(g => g.First())
                            .ToList();
                        // Add combinations to the article's protein data
                        foreach (var combination in distinctList)
                        {
                            Article.ProteinData.Add(combination);
                        }

                        combinationCount = distinctList.Count;
                        showCombinationResult = true;

                        // Show success message
                        await JSRuntime.InvokeVoidAsync("alert", $"Successfully created {combinationCount} new protein data combinations.");
                    }

                    // Helper methods to work with properties dynamically
                    private object GetPropertyValue(ProteinData data, string propertyName)
                    {
                        return data.GetType().GetProperty(propertyName)?.GetValue(data);
                    }

                    private void SetPropertyValue(ProteinData data, string propertyName, object value)
                    {
                        var prop = data.GetType().GetProperty(propertyName);
                        if (prop != null)
                        {
                            prop.SetValue(data, value);
                        }
                    }
                }

                <style>
                .protein-table th, .protein-table td {
                    white-space: nowrap;
                    vertical-align: middle;
                    font-size: 0.95rem;
                }
                .protein-table th {
                    background: #e3f2fd;
                    font-weight: 600;
                }
                @@media (max-width: 768px) {
                    .protein-table th, .protein-table td {
                        font-size: 0.85rem;
                        padding: 0.3rem;
                    }
                }
                </style>

                @if (Article.Chapters != null)
                {
                    <div class="position-relative">
                            <div class="highlight-nav position-absolute top-0 end-0 mt-2 me-4">
                                <button class="btn btn-sm btn-light" @onclick="PrevHighlight">
                                    &lt;
                                </button>
                                <span class="mx-2">@(currentHighlightIndex+1)/@highlightCount</span>
                                <button class="btn btn-sm btn-light" @onclick="NextHighlight">
                                    &gt;
                                </button>
                                
                                    <div class="d-flex flex-column align-items-start mt-2">
                                        @if (termCategory != -1)
                                        {
                                            <button class="btn btn-sm btn-danger m-2" @onclick="() => RemoveInvalidRecords(searchTerm, termCategory)">
                                                Remove All with '@searchTerm' (@keyValuePairs[termCategory])
                                            </button>
                                        }
                                        @if (termCategory == 0 && !searchTerm.Contains("fold", StringComparison.InvariantCultureIgnoreCase))
                                        {
                                        <button class="btn btn-sm btn-info m-2" @onclick="() => OpenRCSB(searchTerm)">
                                            Open RCSB for '@searchTerm'
                                        </button>
                                        }
                                    </div>
                                    @code{
                                        public async Task OpenRCSB(string searchTerm)
                                        {
                                            var url = $"https://www.rcsb.org/structure/{searchTerm}";
                                            await JSRuntime.InvokeVoidAsync("open", url, "_blank");
                                        }
                                    }
                                
                                @if (termCategory != -1)
                                {
                                    <div class="mt-2 d-flex align-items-center">
                                        <span class="me-2">Replace with:</span>
                                        @switch (termCategory)
                                        {
                                            case 5: // Temperature
                                            case 7: // Ion Concentration
                                            case 8: // Simulation Length
                                                <input type="number" step="0.01" class="form-control form-control-sm me-2" style="width: 120px;" 
                                                @bind="replacementValue" />
                                                break;
                                            default: // String fields
                                                <input type="text" class="form-control form-control-sm me-2" style="width: 150px;" 
                                                @bind="replacementValueText" />
                                                break;
                                        }
                                        <button class="btn btn-sm btn-warning" @onclick="() => UpdateMatchingRecords(searchTerm, termCategory)">
                                            Apply
                                        </button>
                                    </div>
                                }

                                @code{


                                    private double replacementValue;
                                    private string replacementValueText;

                                    private void UpdateMatchingRecords(string term, int termCategory)
                                    {
                                        if (Article?.ProteinData == null) return;

                                        switch (termCategory)
                                        {
                                            case 0: // Protein ID
                                                foreach (var protein in Article.ProteinData
                                                    .Where(p => p.ProteinId != null && p.ProteinId.Equals(term, StringComparison.OrdinalIgnoreCase)))
                                                {
                                                    protein.ProteinId = replacementValueText;
                                                }
                                                break;
                                            case 1: // Software Name
                                                foreach (var protein in Article.ProteinData
                                                    .Where(p => p.SoftwareName != null && p.SoftwareName.Equals(term, StringComparison.OrdinalIgnoreCase)))
                                                {
                                                    protein.SoftwareName = replacementValueText;
                                                }
                                                break;
                                            case 2: // Water Model
                                                foreach (var protein in Article.ProteinData
                                                    .Where(p => p.WaterModel != null && p.WaterModel.Equals(term, StringComparison.OrdinalIgnoreCase)))
                                                {
                                                    protein.WaterModel = replacementValueText;
                                                }
                                                break;
                                            case 3: // Force Field
                                                foreach (var protein in Article.ProteinData
                                                    .Where(p => p.ForceField != null && p.ForceField.Equals(term, StringComparison.OrdinalIgnoreCase)))
                                                {
                                                    protein.ForceField = replacementValueText;
                                                }
                                                break;
                                            case 4: // SimulationMethod
                                                foreach (var protein in Article.ProteinData
                                                    .Where(p => p.SimulationMethod != null && p.SimulationMethod.Equals(term, StringComparison.OrdinalIgnoreCase)))
                                                {
                                                    protein.SimulationMethod = replacementValueText;
                                                }
                                                break;
                                            case 5: // Temperature
                                                if (double.TryParse(term, out double temp))
                                                {
                                                    foreach (var protein in Article.ProteinData.Where(p => p.Temperature == temp))
                                                    {
                                                        protein.Temperature = replacementValue;
                                                    }
                                                }
                                                break;
                                            case 6: // Ions
                                                foreach (var protein in Article.ProteinData
                                                    .Where(p => p.Ions != null && p.Ions.Equals(term, StringComparison.OrdinalIgnoreCase)))
                                                {
                                                    protein.Ions = replacementValueText;
                                                }
                                                break;
                                            case 7: // Ion Concentration
                                                if (double.TryParse(term, out double ionConcentration))
                                                {
                                                    foreach (var protein in Article.ProteinData.Where(p => p.IonConcentration == ionConcentration))
                                                    {
                                                        protein.IonConcentration = replacementValue;
                                                    }
                                                }
                                                break;
                                            case 8: // Simulation Length
                                                if (double.TryParse(term, out double simulationLength))
                                                {
                                                    foreach (var protein in Article.ProteinData.Where(p => p.SimulationLength == simulationLength))
                                                    {
                                                        protein.SimulationLength = replacementValue;
                                                    }
                                                }
                                                break;

                                            case 9: // Software Version
                                                foreach (var protein in Article.ProteinData
                                                    .Where(p => p.SoftwareVersion != null && p.SoftwareVersion.Equals(term, StringComparison.OrdinalIgnoreCase)))
                                                {
                                                    protein.SoftwareVersion = replacementValueText;
                                                }
                                                break;
                                        }

                                        // Reset the search term to clear highlighting
                                        string oldSearchTerm = searchTerm;
                                        searchTerm = "";
                                        ProcessTextForHighlighting();
        
                                        // Notify user of successful update
                                        JSRuntime.InvokeVoidAsync("alert", $"Updated all {keyValuePairs[termCategory]} values from '{oldSearchTerm}' to '{(termCategory == 5 || termCategory == 7 || termCategory == 8 ? replacementValue.ToString() : replacementValueText)}'");
        
                                        // Reset replacement values
                                        replacementValueText = "";
                                        replacementValue = 0;
                                    }
                                }
                            </div>

                        
                        <div class="d-flex justify-content-center align-items-center mb-3">
                            <div class="form-check me-2" style="justify-content:center">
                                <input type="checkbox" class="form-check-input m-2" style="position:relative;top:5px" id="ignoreCaseCheckbox" @bind="ignoreCase" />
                                <label class="form-check m-2">Ignore Case</label>
                            </div>
                            <input type="text"
                                    class="form-control me-2"
                                    style="max-width: 300px;"
                                    placeholder="Search full text..."
                                    @bind="searchTerm"
                                    @bind:event="oninput" />
                            <button class="btn btn-primary"
                                    @onclick="() => HighlightText(searchTerm, -1)">
                                Highlight
                            </button>
                        </div>

                        @code{
                            private bool ignoreCase = true;
                        }
    
                        <div class="article-fulltext-container">
                            @foreach (var chapter in processedChapters)
                            {
                                <div class="chapter-section position-relative">
                                    @if (!string.IsNullOrWhiteSpace(chapter.Title))
                                    {
                                        <div class="d-flex align-items-center justify-content-between mb-2">
                                            <div class="chapter-title">@chapter.Title</div>
                                            <button class="btn btn-outline-danger btn-sm chapter-remove-btn"
                                                    title="Remove this chapter"
                                                    @onclick="() => DeleteChapter(chapter.Title)">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none" viewBox="0 0 24 24">
                                                    <circle cx="12" cy="12" r="12" fill="#fff" />
                                                    <path d="M15.5 8.5l-7 7M8.5 8.5l7 7" stroke="#dc3545" stroke-width="2" stroke-linecap="round"/>
                                                </svg>
                                                <span class="visually-hidden">Remove</span>
                                            </button>
                                        </div>
                                    }
                                    <div class="chapter-content">
                                        @foreach (var fragment in chapter.Fragments)
                                        {
                                            if (fragment.IsMatch)
                                            {
                                                <span class="@fragment.Classes" data-index="@fragment.MatchIndex">@fragment.Text</span>
                                            }
                                            else
                                            {
                                                <span>@fragment.Text</span>
                                            }
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <p>No full text available.</p>
                }

                <style>
                .article-fulltext-container {
                    padding: 1.5rem;
                    font-family: 'Georgia', 'Times New Roman', Times, serif;
                    font-size: 1.08rem;
                    line-height: 1.7;
                    background: #f9fafb;
                    border-radius: 0.5rem;
                    box-shadow: 0 2px 12px rgba(0,0,0,0.04);
                    max-height: 60vh;
                    overflow-y: auto;
                    max-width: 60%;
                    margin: 0 auto;
                }
                .chapter-section {
                    margin-bottom: 3rem;
                    padding: 0 0.5rem;
                    border-bottom: 1px solid #e0e0e0;
                }

                .chapter-section:last-child {
                    border-bottom: none;
                }

                .chapter-title {
                    font-family: 'Merriweather', 'Georgia', serif;
                    font-size: 1.35rem;
                    font-weight: 700;
                    color: #2a3b4c;
                    margin-top: 0.5rem;
                    margin-bottom: 1rem;
                    letter-spacing: 0.01em;
                    text-shadow: 0 1px 0 #fff;
                }

                .chapter-content p {
                    margin-bottom: 1.1em;
                    text-align: justify;
                    text-justify: inter-word;
                }

                @@media (max-width: 900px) {
                    .article-fulltext-container {
                        font-size: 1rem;
                        padding: 1rem 0.2rem;
                    }
                    .chapter-title {
                        font-size: 1.1rem;
                    }
                }
                </style>

            </div>
        </div>

        <div class="modal-footer">
            <button class="btn btn-secondary" @onclick="Close">Close</button>
        </div>
    }
</SimpleModal>

<style>
.upload-label {
    cursor: pointer;
    background: #f8f9fa;
    border-radius: 50%;
    padding: 0.3rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    transition: background 0.2s;
    display: inline-block;
}
.upload-label:hover {
    background: #e2e6ea;
}
.upload-icon {
    color: #007bff;
    display: flex;
    align-items: center;
    justify-content: center;
}
</style>

<SimpleModal @ref="discreditModal"
             Id="discredit-modal"
             OnModalStateChange="() => {}"
             OpenOnFirstRender="false">
    <div class="modal-header">
        <h5 class="modal-title">Discredit Article: @Article?.Title</h5>
        <button type="button" class="btn-close" @onclick="CloseDiscreditModal"></button>
    </div>
    <div class="modal-body">
        <div class="mb-3">
            <label class="form-label">Discredit Reason:</label>
            <textarea class="form-control" rows="4" @bind="discreditReason"></textarea>
        </div>
    </div>
    <div class="modal-footer">
        <button class="btn btn-secondary" @onclick="CloseDiscreditModal">Cancel</button>
        <button class="btn btn-danger" @onclick="SaveDiscredit">Confirm Discredit</button>
    </div>
</SimpleModal>

@code {
    private SimpleModal? modal;

    [Parameter]
    public Article? Article { get; set; }

    [Parameter]
    public EventCallback<bool> OnModalStateChange { get; set; }

    private SimpleModal? discreditModal;
    private string discreditReason = "";
    private ProteinData newProtein = new ProteinData();

    private Dictionary<int,string> keyValuePairs = new Dictionary<int, string>
    {
        {-1, "General"},
        { 0, "Protein ID" },
        { 1, "Software Name" },
        { 2, "Water Model" },
        { 3, "Force Field" },
        { 4, "SimulationMethod" },
        { 5, "Temperature (K)" },
        { 6, "Ions" },
        { 7, "Ion Concentration (M)" },
        { 8, "Simulation Length (ns)" },
        { 9, "Software Version"}
    };

    // Highlighting system
    private string searchTerm = "";
    private int termCategory = -1; // Can be used to filter highlights by category if needed
    private int currentHighlightIndex = -1;
    private List<ChapterDisplay> processedChapters = new();
    private int highlightCount = 0;


    public List<object> PBDData { get; set; } = new List<object>();

    private async Task HandleModalStateChange(bool isOpen)
    {
        await OnModalStateChange.InvokeAsync(isOpen);

    }

    private async Task OpenLink(string url)
    {
        await Close();
        await JSRuntime.InvokeVoidAsync("window.open", url, "_blank");
    }

    private async Task GetPDBData()
    {
    }

    private async Task HandlePdfUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null || !file.Name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
            return;

        // Allow up to 100 MB
        const long maxFileSize = 100 * 1024 * 1024;
        if (file.Size > maxFileSize)
        {
            // Optionally show error to user
            return;
        }

        using var stream = file.OpenReadStream(maxFileSize);
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        var pdfBytes = ms.ToArray();

        // Convert PDF bytes to HTML
        try
        {
            var htmlFromPDF = ChapterExtractor.ExtractWithPdfPig(pdfBytes);

            var chapters = ArticleExtractorFromHtml.ExtractChapters(htmlFromPDF,Article.Title,"");
            chapters.ForEach(c => c.ArticleDoi = Article.Doi);

            await DatabaseDataHandler.ReplaceChaptersAsync(chapters,Article.Doi);

            Article.Chapters = chapters;

            await ExtractProteinData();


            ProcessTextForHighlighting();

            await InvokeAsync(StateHasChanged);

        }
        catch (Exception ex)
        {
            // Handle conversion errors
            Console.WriteLine($"Error converting PDF to HTML: {ex}");
        }
    }

    private async Task ExtractProteinData()
    {
        var fullText = string.Join("\n\n", Article.Chapters.Select(c => c.Content));

        List<string> KnownSoftwareNames = new List<string>();
        List<string> ImplicitWaterNames = new List<string>();
        List<string> ExplicitWaterNames = new List<string>();
        List<string> KnownForceFields = new List<string>();
        List<string> KnownMethods = new List<string>();
        List<string> KnownIons = new List<string>();

        var simulationSoftwares = await DatabaseDataHandler.GetAllAsync<SimulationSoftware>();
        KnownSoftwareNames = simulationSoftwares.Select(x => x.SoftwareName).ToList();

        var waterModels = await DatabaseDataHandler.GetAllAsync<WaterModel>().ConfigureAwait(false);
        ImplicitWaterNames = waterModels.Where(wm => wm.WaterModelType == "implicit").Select(wm => wm.WaterModelName).ToList();
        ExplicitWaterNames = waterModels.Where(wm => wm.WaterModelType == "explicit").Select(wm => wm.WaterModelName).ToList();

        var forceFields = await DatabaseDataHandler.GetAllAsync<ForceFieldSoftware>().ConfigureAwait(false);
        KnownForceFields = forceFields.Select(ff => ff.SoftwareName).ToList();

        var methods = await DatabaseDataHandler.GetAllAsync<SimulationMethod>().ConfigureAwait(false);
        KnownMethods = methods.Select(m => m.MethodName).ToList();

        var ions = await DatabaseDataHandler.GetAllAsync<Ion>().ConfigureAwait(false);
        KnownIons = ions.Select(i => i.IonName).ToList();


        Article.ProteinData = await PDBRecordsExtractor.ExtractMdData(fullText,KnownSoftwareNames,ImplicitWaterNames,ExplicitWaterNames,KnownForceFields,KnownMethods,KnownIons);

        var pdbIds = Article.ProteinData.Select(pd => pd.ProteinId)
                        .Where(id => !string.IsNullOrEmpty(id) && !id.Contains("AlphaFold", StringComparison.InvariantCultureIgnoreCase) && !id.Contains("RosettaFold", StringComparison.InvariantCultureIgnoreCase))
                        .Distinct()
                        .ToList();
        Console.WriteLine($"[LOOP] Found {pdbIds.Count} unique PDB IDs for DOI={Article.Doi}");

        var extractTasks = pdbIds
            .ToDictionary(
                pdbId => pdbId,
                pdbId => PageFetcher.ExtractClassificationOrganismAndMethodAsync(pdbId)
            );

        Console.WriteLine($"[LOOP] Awaiting {extractTasks.Count} ExtractClassificationOrganismAndMethodAsync tasks for DOI={Article.Doi}");
        await Task.WhenAll(extractTasks.Values).ConfigureAwait(false);

        var pdbIdToInfo = new Dictionary<string, (string classification, string organism, string method)>();

        foreach (var kvp in extractTasks)
        {
            var pdbId = kvp.Key;
            var results = await kvp.Value;
            var valid = results.FirstOrDefault(r =>
                !string.Equals(r.Item1, "Not found", StringComparison.OrdinalIgnoreCase) ||
                !string.Equals(r.Item2, "Not found", StringComparison.OrdinalIgnoreCase) ||
                !string.Equals(r.Item3, "Not found", StringComparison.OrdinalIgnoreCase)
            );
            if (
                string.Equals(valid.Item1, "Not found", StringComparison.OrdinalIgnoreCase) &&
                string.Equals(valid.Item2, "Not found", StringComparison.OrdinalIgnoreCase) &&
                string.Equals(valid.Item3, "Not found", StringComparison.OrdinalIgnoreCase)
            )
            {
                pdbIdToInfo[pdbId] = ("Not found", "Not found", "Not found");
            }
            else
            {
                pdbIdToInfo[pdbId] = valid;
            }
        }
        Console.WriteLine($"[LOOP] Classification/organism/method info extracted for {pdbIdToInfo.Count} PDB IDs for DOI={Article.Doi}");

        // Set classification, organism, method if at least one is valid
        foreach (var pd in Article.ProteinData)
        {
            if (pdbIdToInfo.TryGetValue(pd.ProteinId, out var info))
            {
                if (!string.Equals(info.classification, "Not found", StringComparison.OrdinalIgnoreCase))
                    pd.Classification = info.classification;
                if (!string.Equals(info.organism, "Not found", StringComparison.OrdinalIgnoreCase))
                    pd.Organism = info.organism;
                if (!string.Equals(info.method, "Not found", StringComparison.OrdinalIgnoreCase))
                    pd.Method = info.method;
            }
        }

        // Remove ProteinData with all empty or whitespace for classification, method, and organism
        int beforeFilter = Article.ProteinData.Count;
        Article.ProteinData = Article.ProteinData
            .Where(pd =>
                !string.IsNullOrWhiteSpace(pd.Classification) ||
                !string.IsNullOrWhiteSpace(pd.Method) ||
                !string.IsNullOrWhiteSpace(pd.Organism)
            )
            .ToList();
        int afterFilter = Article.ProteinData.Count;
        Console.WriteLine($"[LOOP] Filtered protein data for DOI={Article.Doi}: {beforeFilter} -> {afterFilter} records");
    }


    private void ShowDiscreditModal()
    {
        discreditReason = Article.DiscreditedReason;
        discreditModal?.ShowModal();
    }

    private void CloseDiscreditModal()
    {
        discreditModal?.CloseModal();
    }

    private async Task UpdateArticleProteinData()
    {
        if (Article == null || Article.ProteinData == null)
            return;
        Article.ProteinData.ToList().ForEach(p => p.ArticleDoi = Article.Doi);
        await DatabaseDataHandler.SaveOrUpdateProteinDataListAsync(Article.ProteinData.ToList());
    }

    private async Task SaveDiscredit()
    {
        Article.Discredited = true;
        await DatabaseDataHandler.DiscreditArticle(Article.Doi, discreditReason);
        Article.Chapters = new List<Chapter>();
        Article.ProteinData = new List<ProteinData>();

        CloseDiscreditModal();
        await modal?.CloseModal();
    }

    private void AddProtein()
    {
        Article.ProteinData.Add(newProtein);
        newProtein = new ProteinData();
    }

    private void RemoveProtein(ProteinData protein)
    {
        Article.ProteinData.Remove(protein);
    }

    private void RemoveInvalidRecords(string term, int termCategory)
    {
        switch (termCategory)
        {
            case 0: // Protein ID
                if (Article?.ProteinData != null)
                {
                    var toRemove = Article.ProteinData
                        .Where(p => p.ProteinId != null && p.ProteinId.Equals(term))
                        .ToList();
                    foreach (var item in toRemove)
                    {
                        Article.ProteinData.Remove(item);
                    }
                }
                break;
            case 1: // Software Name
                if (Article?.ProteinData != null)
                {
                    var toRemove = Article.ProteinData
                        .Where(p => p.SoftwareName != null && p.SoftwareName.Equals(term))
                        .ToList();
                    foreach (var item in toRemove)
                    {
                        Article.ProteinData.Remove(item);
                    }
                }
                break;
            case 2: // Water Model
                if (Article?.ProteinData != null)
                {
                    var toRemove = Article.ProteinData
                        .Where(p => p.WaterModel != null && p.WaterModel.Equals(term))
                        .ToList();
                    foreach (var item in toRemove)
                    {
                        Article.ProteinData.Remove(item);
                    }
                }
                break;
            case 3: // Force Field
                if (Article?.ProteinData != null)
                {
                    var toRemove = Article.ProteinData
                        .Where(p => p.ForceField != null && p.ForceField.Equals(term))
                        .ToList();
                    foreach (var item in toRemove)
                    {
                        Article.ProteinData.Remove(item);
                    }
                }
                break;
            case 4: // SimulationMethod
                if (Article?.ProteinData != null)
                {
                    var toRemove = Article.ProteinData
                        .Where(p => p.SimulationMethod != null && p.SimulationMethod.Equals(term))
                        .ToList();
                    foreach (var item in toRemove)
                    {
                        Article.ProteinData.Remove(item);
                    }
                }
                break;
            case 5: // Temperature
                if (Article?.ProteinData != null && double.TryParse(term, out double temp))
                {
                    var toRemove = Article.ProteinData
                        .Where(p => p.Temperature == temp)
                        .ToList();
                    foreach (var item in toRemove)
                    {
                        Article.ProteinData.Remove(item);
                    }
                }
                break;
            case 6: // Ions
                if (Article?.ProteinData != null)
                {
                    var toRemove = Article.ProteinData
                        .Where(p => p.Ions != null && p.Ions.Equals(term))
                        .ToList();
                    foreach (var item in toRemove)
                    {
                        Article.ProteinData.Remove(item);
                    }
                }
                break;
            case 7: // Ion Concentration
                if (Article?.ProteinData != null && double.TryParse(term, out double ionConcentration))
                {
                    var toRemove = Article.ProteinData
                        .Where(p => p.IonConcentration == ionConcentration)
                        .ToList();
                    foreach (var item in toRemove)
                    {
                        Article.ProteinData.Remove(item);
                    }
                }
                break;
            case 8: // Simulation Length
                if (Article?.ProteinData != null && double.TryParse(term, out double simulationLength))
                {
                    var toRemove = Article.ProteinData
                        .Where(p => p.SimulationLength == simulationLength)
                        .ToList();
                    foreach (var item in toRemove)
                    {
                        Article.ProteinData.Remove(item);
                    }
                }
                break;
            case 9: // Software Version
                if (Article?.ProteinData != null)
                {
                    var toRemove = Article.ProteinData
                        .Where(p => p.SoftwareVersion != null && p.SoftwareVersion.Equals(term))
                        .ToList();
                    foreach (var item in toRemove)
                    {
                        Article.ProteinData.Remove(item);
                    }
                }
                break;
        }


    }

    private async Task HighlightText(string term,int termCategory)
    {
        if (termCategory == -1)
        {
            this.termCategory = -1;
        }
        this.termCategory = termCategory;
        searchTerm = term;
        currentHighlightIndex = 0;

        if(termCategory==5 || termCategory == 7 || termCategory == 10)
            replacementValue = Convert.ToDouble(searchTerm);
        else
            replacementValueText = searchTerm;
        ProcessTextForHighlighting();
        UpdateHighlightClasses();

        // Ensure DOM is updated before scrolling
        await InvokeAsync(StateHasChanged);
        await Task.Delay(50); // Give Blazor time to update the DOM

        await ScrollToHighlight();
    }

    private void ProcessTextForHighlighting()
    {
        processedChapters = new();
        highlightCount = 0;

        foreach (var chapter in Article.Chapters)
        {
            var newChapter = new ChapterDisplay { Title = chapter.Title };
            string content = string.Join("\n", chapter.Content.Split('\n'));

            if (!string.IsNullOrEmpty(searchTerm))
            {
                var regex = new Regex(Regex.Escape(searchTerm), ignoreCase ? RegexOptions.IgnoreCase : RegexOptions.None);

                var matches = regex.Matches(content);

                int lastIndex = 0;
                foreach (Match match in matches)
                {
                    if (match.Index > lastIndex)
                    {
                        newChapter.Fragments.Add(new TextFragment
                        {
                            Text = content.Substring(lastIndex, match.Index - lastIndex)
                        });
                    }
                    newChapter.Fragments.Add(new TextFragment
                    {
                        Text = match.Value,
                        IsMatch = true,
                        MatchIndex = highlightCount
                    });
                    highlightCount++;
                    lastIndex = match.Index + match.Length;
                }
                if (lastIndex < content.Length)
                {
                    newChapter.Fragments.Add(new TextFragment
                    {
                        Text = content.Substring(lastIndex)
                    });
                }
            }
            else
            {
                newChapter.Fragments.Add(new TextFragment { Text = content });
            }

            processedChapters.Add(newChapter);
        }
    }

    private async Task NextHighlight()
    {
        currentHighlightIndex = (currentHighlightIndex + 1) % highlightCount;
        UpdateHighlightClasses();


        // Ensure DOM is updated before scrolling
        await InvokeAsync(StateHasChanged);
        await Task.Delay(50); // Give Blazor time to update the DOM

        await ScrollToHighlight();
    }

    private async Task PrevHighlight()
    {
        currentHighlightIndex = (currentHighlightIndex - 1 + highlightCount) % highlightCount;
        UpdateHighlightClasses();

        // Ensure DOM is updated before scrolling
        await InvokeAsync(StateHasChanged);
        await Task.Delay(50); // Give Blazor time to update the DOM

        await ScrollToHighlight();
    }

    private async Task ScrollToHighlight()
    {
        if (currentHighlightIndex < 0) return;

        await JSRuntime.InvokeVoidAsync("scrollToHighlight", 
            currentHighlightIndex.ToString());
    }

    private void UpdateHighlightClasses()
    {
        foreach (var chapter in processedChapters)
        {
            foreach (var fragment in chapter.Fragments)
            {
                fragment.Classes = fragment.IsMatch
                    ? fragment.MatchIndex == currentHighlightIndex 
                        ? "highlight-active" 
                        : "highlight-inactive"
                    : "";
            }
        }
    }

    private async Task DeleteChapter(string chapterTitle)
    {
        await DatabaseDataHandler.DeleteChapterAsync(chapterTitle, Article.Doi);
        Article.Chapters.Remove(Article.Chapters.First(c=>c.Title == chapterTitle));
        processedChapters.RemoveAll(c => c.Title == chapterTitle);
        await InvokeAsync(StateHasChanged);
    }

    private async Task CompleteArticle()
    {
        if (Article == null) return;
        if (Article.ProteinData.Any(p => !p.Approved))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please approve all protein data before completing the article.");
            return;
        }
        Article.Completed = true;
        await UpdateArticleProteinData();
        await DatabaseDataHandler.CompleteArticleAsync(Article.Doi);
        await Close();
    }

    // Supporting classes
    private class ChapterDisplay
    {
        public string Title { get; set; } = "";
        public List<TextFragment> Fragments { get; set; } = new();
    }

    private class TextFragment
    {
        public string Text { get; set; } = "";
        public bool IsMatch { get; set; }
        public int MatchIndex { get; set; } = -1;
        public string Classes { get; set; } = "";
    }


    public async Task Show()
    {
        await (modal?.ShowModal() ?? Task.CompletedTask);

        ProcessTextForHighlighting();
    }

    public async Task Close()
    {
        searchTerm = string.Empty;
        currentHighlightIndex = -1;
        await (modal?.CloseModal() ?? Task.CompletedTask);
    }


    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    [Inject]
    private HttpClient Http { get; set; }
}

    <style>
        /* Highlighting styles */
        .highlight-inactive {
            background-color: #FFEB3B; /* Yellow */
            border-bottom: 2px solid #FFC107;
        }

        .highlight-active {
            background-color: #FFC107; /* Dark yellow */
            border-bottom: 2px solid #FF9800;
        }

        /* Navigation controls */
        .highlight-nav {
            background: white;
            padding: 5px 10px;
            border-radius: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            z-index: 100;
        }

        /* Modal header adjustments */
        .modal-header {
            flex-wrap: wrap;
            gap: 10px;
            padding-bottom: 10px;
        }

        /* Table input fields */
        .protein-table input {
            min-width: 80px;
            padding: 0.25rem 0.5rem;
            font-size: 0.9rem;
        }

        /* Full text container */
        .article-fulltext-container {
            padding-top: 40px; /* Space for navigation */
        }

        /* Discredited article styles */
        .discredited-header,
        .discredited-body {
            background-color: #ffcccb !important;
        }
    </style>