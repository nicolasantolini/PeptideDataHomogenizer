@using System.Linq
@using Entities
@using PeptideDataHomogenizer.Services
@using PeptideDataHomogenizer.State

@inject ArticlePerProjectService ArticlePerProjectService
@inject IJSRuntime JSRuntime

@if (ArticlesPerProject == null)
{
    //Loading spinner
    <div class="text-center my-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else{

<div class="text-center my-3">
        @if (ArticlesPerProject != null && ArticlesPerProject.Any())
    {
            var totalArticles = ArticlesPerProject.Count;
            var articlesWithValidFullText = ArticlesPerProject.Count(article => HasLargeFullText(article.Article));
        var proportion = (double)articlesWithValidFullText / totalArticles * 100;

        <p class="alert alert-info">
            <strong>@articlesWithValidFullText</strong> out of <strong>@totalArticles</strong> articles 
            have valid full text (<strong>@proportion.ToString("0.00")%</strong>).
        </p>
        //article with protein records
            var articlesWithProteinRecords = ArticlesPerProject.Count(article => article.Article.ProteinData != null && article.Article.ProteinData.Any());
        var proportionWithProteinRecords = (double)articlesWithProteinRecords / totalArticles * 100;
        <p class="alert alert-info">
            <strong>@articlesWithProteinRecords</strong> out of <strong>@totalArticles</strong> articles 
            have protein records (<strong>@proportionWithProteinRecords.ToString("0.00")%</strong>).
        </p>
    }
    else
    {
        <p class="alert alert-warning">No articles available to calculate proportions.</p>
    }
</div>

<!-- Legend for table -->
<div class="mb-3">
    <strong>Legend:</strong>
    <span style="background-color: #ffcccb; padding: 2px 6px; margin-left: 10px;">Discredited Articles</span>
    <span style="background-color: #008000; color: white; padding: 2px 6px; margin-left: 10px;">Completed Articles</span>
</div>

<table class="table table-hover">
    <thead>
        <tr>
            <th>Title</th>
            <th>Journal</th>
            <th>Authors</th>
            <th>Date</th>
            <th>DOI</th>
            <td>Has Valid Full Text</td>
            <td>Has Protein Records</td>
        </tr>
    </thead>
    <tbody>
            @foreach (var article in (ArticlesPerProject ?? Enumerable.Empty<ArticlePerProject>()).OrderBy(a => HasLargeFullText(a.Article) ? 1 : 0)
            .OrderBy(a => HasLargeFullText(a.Article) ? 1 : 0))
            {
                <tr @onclick="async () => await ShowArticleDetails(article.Article)"
    class="clickable-row @GetRowClass(article)"
    style="cursor: pointer;">
                    <td>@article.Article.Title</td>
                    <td>@article.Article.Journal</td>
                    <td>@article.Article.Authors</td>
                    <td>@article.Article.PublicationDate.ToShortDateString()</td>
                    <td>@article.Article.Doi</td>
                    <td>
                        @if (HasLargeFullText(article.Article))
                        {
                            <span class="text-success">Yes</span>
                        }
                        else
                        {
                            <span class="text-danger">No</span>
                        }
                    </td>
                    <td>
                        @if (article.Article.ProteinData != null && article.Article.ProteinData.Any())
                        {
                            <span class="text-success">Yes</span>
                        }
                        else
                        {
                            <span class="text-danger">No</span>
                        }
                    </td>
                </tr>
                @if (
                        article?.Article.ProteinData != null &&
                        article.Article.ProteinData.Any() &&
                        ArticlesPerProject?.FirstOrDefault(app => app?.ArticleId == article?.Article.Doi) is ArticlePerProject appArticle &&
                        !appArticle.IsApproved &&
                        article.Article.ProteinData.All(pd => pd?.Id != 0)
                        )
                {
                    <tr>  
                        <td colspan="7">  
                            <div class="alert alert-primary d-flex align-items-center" style="font-size:1.1em;">  
                                <i class="bi bi-arrow-right-circle-fill me-2" style="font-size:1.5em;"></i>  
                                <span>
                                    <strong>Continue...</strong> This message refers to article: <em>@article.Article.Title</em>.
                                </span>  
                            </div>  
                        </td>  
                    </tr>  
                }
            }
    </tbody>
</table>

    @if (selectedArticle != null)
    {
        <ArticleDetailModal Article="@selectedArticle"
                            ArticlePerProject="@(ArticlesPerProject.FirstOrDefault(app=>app.ArticleId == selectedArticle.Doi))"
                            OnModalStateChange="HandleModalStateChange" />
    }

}

<style>

    .discredited-row td {
        background-color: #ffcccb !important;
    }

    .completed-row td {
        background-color: #008000 !important;
        cursor: pointer;
        color:white;
    }
</style>

@code {
    [Parameter]
    public List<ArticlePerProject>? ArticlesPerProject { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        //print chapters per article
        if (ArticlesPerProject == null || !ArticlesPerProject.Any())
        {
            return; // No articles to display
        }
        StateHasChanged();


    }


    private ArticleDetailModal? modalRef;
    private Article? selectedArticle;
    private ArticlePerProject? selectedArticlePerProject;


    private string JoinAuthors(IEnumerable<AuthorInfo> authors)
        => string.Join(", ", authors.Take(3).Select(a => a.LastName + " " + a.FirstName?.FirstOrDefault() + ".")) 
           + (authors.Count() > 3 ? " et al." : "");

    private string GetAbstractPreview(string? abstractText)
        => abstractText?[..Math.Min(100, abstractText.Length)] + 
           (abstractText?.Length > 100 ? "..." : "") ?? "No abstract available";

    private bool HasLargeFullText(Article article)
    {
        if (article.Chapters == null)
        {
            return false;
        }

        var totalLength = article.Chapters.Sum(chapter => chapter.Content?.Length ?? 0);
        return totalLength > 1000;
    }

    private async Task ShowArticleDetails(Article article)
    {
        if (article == null || string.IsNullOrEmpty(article.Doi) || 
            !ArticlesPerProject.Any(a => a.ArticleId == article.Doi))
        {
            return; // No valid article or project data available
        }


        selectedArticle = article;
        selectedArticle.Chapters = article.Chapters;
        //print chapter count for both
        Console.WriteLine($"Selected Article: {article.Title}, Chapters Count: {article.Chapters?.Count ?? 0}");


    }

    private async Task HandleModalStateChange(bool isOpen)
    {
        if (!isOpen)
        {
            selectedArticle = null;
            StateHasChanged();
        }

    }

    private string GetRowClass(ArticlePerProject article)
    {
        if (article == null || string.IsNullOrEmpty(article.ArticleId) || 
            !ArticlesPerProject.Any(a => a.ArticleId == article.ArticleId))
        {
            return string.Empty;
        }
        
        return article.IsDiscredited ? "discredited-row" : 
              (article.IsApproved && !article.IsDiscredited ? "completed-row" : "");
    }

}