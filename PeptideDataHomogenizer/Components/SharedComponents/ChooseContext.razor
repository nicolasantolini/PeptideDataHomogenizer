@using Entities
@using Microsoft.AspNetCore.Identity
@using PeptideDataHomogenizer.Data
@using PeptideDataHomogenizer.Services
@using PeptideDataHomogenizer.State

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject DatabaseDataHandler DatabaseDataHandler
@inject OrganizationService OrganizationService
@inject UserOrganizationService UserOrganizationService
@inject UserProjectService UserProjectService
@inject ProjectService ProjectService
@inject NavigationManager NavigationManager

@inject ContextCookieManager ContextCookieManager
@inject ProjectCookieManager ProjectCookieManager

@rendermode InteractiveServer

@if (ShowModal)
{
    @if (IsLoading)
    {
        <div class="text-center my-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="modal @(ShowModal ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="bi bi-diagram-3-fill me-2"></i>Switch Context
                        </h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        @if (CurrentOrganization != null)
                        {
                            <div class="mb-4">
                                <h6 class="text-muted mb-3">Current Context</h6>
                                <div class="card border-primary">
                                    <div class="card-body d-flex align-items-center">
                                        <div class="p-3 d-flex align-items-center">
                                            @if (CurrentOrganization.LogoData != null && CurrentOrganization.LogoData.Length > 0)
                                            {
                                                <img src="data:@CurrentOrganization.ContentType;base64,@(Convert.ToBase64String(CurrentOrganization.LogoData))" class="rounded-circle border"
                                                     style="width: 150px; height: 150px; object-fit: contain; background-color: #f8f9fa;" />
                                            }
                                            else
                                            {
                                                <div class="rounded-circle bg-light d-flex justify-content-center align-items-center me-3"
                                                     style="width: 50px; height: 50px;">
                                                    <i class="bi bi-building text-secondary"></i>
                                                </div>
                                            }
                                            <div>
                                                <h5 class="mb-1 text-dark">Organization: @CurrentOrganization.Name</h5>
                                                @if (IsAdmin)
                                                {
                                                    <small class="text-muted d-block mb-2">
                                                        Role: <span>Admin</span>
                                                    </small>
                                                }
                                                else
                                                {
                                                    <small class="text-muted d-block mb-2">
                                                        Role: <span>@GetRoleByOrganizationIdAndUserId(CurrentOrganization.Id, currentUser.Id).Result</span>
                                                    </small>
                                                }
                                            </div>
                                        </div>


                                        <div class="p-3 d-flex align-items-center">
                                            @if (CurrentProject != null)
                                            {
                                                @if (CurrentProject.LogoData != null && CurrentProject.LogoData.Length > 0)
                                                {
                                                    <img src="data:@CurrentProject.ContentType;base64,@(Convert.ToBase64String(CurrentProject.LogoData))" 
                                                        class="rounded-circle me-3" style="width: 80px; height: 80px; object-fit: contain;" />
                                                }
                                                else if (CurrentProject != null)
                                                {
                                                    <div class="rounded-circle bg-light d-flex justify-content-center align-items-center me-3"
                                                         style="width: 50px; height: 50px;">
                                                        <i class="bi bi-book text-secondary"></i>
                                                    </div>
                                                }
                                                <div>
                                                    <h5 class="mb-1 text-dark">Project: @CurrentProject.Name</h5>
                                                    @if (IsAdmin)
                                                    {
                                                        <small class="text-muted d-block">
                                                            Role: <span>Admin</span>
                                                        </small>
                                                    }
                                                    else
                                                    {
                                                        <small class="text-muted d-block">
                                                            Role: <span>@(GetRoleByProjectIdAndUserId(CurrentProject.Id, currentUser.Id).Result is { Length: > 0 } role ? role : "Not added")</span>
                                                        </small>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <small class="text-muted">No project selected</small>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <hr class="my-4" />
                        }
                        else
                        {
                            <div class="alert alert-info">
                                <i class="bi bi-info" aria-hidden="true"></i> No context is currently set.
                            </div>
                        }

                        <h6 class="text-muted mb-3">Available Organizations</h6>
                        <div class="row">
                            @foreach (var org in Organizations.Where(o => o.Id != CurrentOrganization?.Id))
                            {
                                <div class="col-md-6 mb-3">
                                    <div class="card h-100" @onclick="() => ShowConfirmation(org.Id, null)" style="cursor: pointer;">
                                        <div class="card-body d-flex align-items-center">
                                            @if (org.LogoData != null && org.LogoData.Length > 0)
                                            {
                                                <img src="data:@org.ContentType;base64,@(Convert.ToBase64String(org.LogoData))" class="rounded-circle border"
                                                     style="width: 150px; height: 150px; object-fit: contain; background-color: #f8f9fa;"/>
                                            }
                                            else
                                            {
                                                <div class="rounded-circle bg-light d-flex justify-content-center align-items-center me-3"
                                                     style="width: 50px; height: 50px;">
                                                    <i class="bi bi-building text-secondary"></i>
                                                </div>
                                            }
                                            <div>
                                                <h5 class="mb-0">@org.Name</h5>
                                                @if (IsAdmin)
                                                {
                                                    <small class="text-muted">
                                                        Role: <strong>Admin</strong>
                                                    </small>
                                                }
                                                else
                                                {
                                                    <small class="text-muted">
                                                        Role: <strong>@GetRoleByOrganizationIdAndUserId(org.Id, currentUser.Id).Result</strong>
                                                    </small>
                                                }
                                                <br />
                                                <small class="text-muted">Click to switch organization</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        @if (SelectedOrganizationId.HasValue && SelectedOrganizationId > 0)
                        {
                            <hr class="my-4" />
                            <h6 class="text-muted mb-3">Projects in Selected Organization</h6>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <div class="card h-100 @(SelectedProjectId == null ? "border-primary" : "")"
                                         @onclick="() => SelectProject(null)" style="cursor: pointer;">
                                        <div class="card-body d-flex align-items-center">
                                            <div class="rounded-circle bg-light d-flex justify-content-center align-items-center me-3"
                                                 style="width: 50px; height: 50px;">
                                                <i class="bi bi-x-circle text-secondary"></i>
                                            </div>
                                            <div>
                                                <h5 class="mb-0">No Project</h5>
                                                <small class="text-muted">Work at organization level</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                @foreach (var project in Projects.Where(p => p.Id != currentProjectId))
                                {
                                    <div class="col-md-6 mb-3">
                                        <div class="card h-100 @(SelectedProjectId == project.Id ? "border-primary" : "")"
                                             @onclick="() => SelectProject(project.Id)" style="cursor: pointer;">
                                            <div class="card-body d-flex align-items-center">
                                                @if (project.LogoData != null && project.LogoData.Length > 0)
                                                {
                                                    <img src="data:@project.ContentType;base64,@(Convert.ToBase64String(project.LogoData))"
                                                          class="rounded-circle me-3" style="width: 50px; height: 50px; object-fit: contain;" />
                                                }
                                                else
                                                {
                                                    <div class="rounded-circle bg-light d-flex justify-content-center align-items-center me-3"
                                                         style="width: 50px; height: 50px;">
                                                        <i class="bi bi-kanban text-secondary"></i>
                                                    </div>
                                                }
                                                <div>
                                                    <h5 class="mb-0">@project.Name</h5>
                                                    @if (IsAdmin)
                                                    {
                                                        <small class="text-muted">
                                                            Role: <strong>Admin</strong>
                                                        </small>
                                                    }
                                                    else
                                                    {
                                                        <small class="text-muted">
                                                            Role: <strong>@(GetRoleByProjectIdAndUserId(project.Id, currentUser.Id).Result is { Length: > 0 } role ? role : "Not added")</strong>
                                                        </small>
                                                    }
                                                    <br />
                                                    <small class="text-muted">Click to select project</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        @if (currentOrganizationId.HasValue)
                        {
                            <div class="mt-4">
                                <button class="btn btn-outline-primary w-100" @onclick="ToggleProjectsSection">
                                    <i class="bi @(ShowProjectsSection ? "bi-chevron-up" : "bi-chevron-down")"></i>
                                    @(ShowProjectsSection ? "Hide Projects" : "Show Projects")
                                </button>

                                @if (ShowProjectsSection)
                                {
                                    <div class="mt-3">
                                        <h6 class="text-muted mb-3">Switch Projects</h6>
                                        <div class="row">
                                            @foreach (var project in Projects)
                                            {
                                                <div class="col-md-6 mb-3">
                                                    <div class="card h-100" @onclick="() => SwitchToProject(project.Id)" style="cursor: pointer;">
                                                        <div class="card-body d-flex align-items-center">
                                                            @if (project.LogoData != null && project.LogoData.Length > 0)
                                                            {
                                                                <img src="data:@project.ContentType;base64,@(Convert.ToBase64String(project.LogoData))"
                                                                  class="rounded-circle me-3" style="width: 50px; height: 50px; object-fit: contain;" />
                                                            }
                                                            else
                                                            {
                                                                <div class="rounded-circle bg-light d-flex justify-content-center align-items-center me-3"
                                                                     style="width: 50px; height: 50px;">
                                                                    <i class="bi bi-kanban text-secondary"></i>
                                                                </div>
                                                            }
                                                            <div>
                                                                <h5 class="mb-0">@project.Name</h5>
                                                                @if (IsAdmin)
                                                                {
                                                                    <small class="text-muted">
                                                                        Role: <strong>Admin</strong>
                                                                    </small>
                                                                }
                                                                else
                                                                {
                                                                    <small class="text-muted">
                                                                        Role: <strong>@(GetRoleByProjectIdAndUserId(project.Id, currentUser.Id).Result is { Length: >0 } role ? role : "Not added")</strong>
                                                                    </small>
                                                                }
                                                                <br />
                                                                <small class="text-muted">Click to switch</small>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        @if (SelectedOrganizationId.HasValue)
                        {
                            <button type="button" class="btn btn-primary" @onclick="ConfirmSwitch">
                                Switch to @(SelectedProjectId.HasValue ? "Project" : "Organization")
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private ApplicationUser? currentUser;
    private int? currentOrganizationId;
    private int? currentProjectId;
    private int? SelectedOrganizationId;
    private int? SelectedProjectId;
    private List<Organization> Organizations = new();
    private List<Project> Projects = new();
    private bool ShowProjectsSection { get; set; } = false;


    private Organization? CurrentOrganization => Organizations.FirstOrDefault(o => o.Id == currentOrganizationId);
    private Project? CurrentProject => Projects.FirstOrDefault(p => p.Id == currentProjectId);

    [Parameter]
    public bool ShowModal { get; set; }

    [Parameter]
    public EventCallback<bool> ShowModalChanged { get; set; }

    [Parameter]
    public int? CurrentOrganizationIdParam { get; set; }

    [Parameter]
    public int? CurrentProjectIdParam { get; set; }

    private bool IsAdmin = false;
    private bool IsLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        if (ShowModal && currentUser == null)
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        IsLoading = true;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        currentUser = await UserManager.GetUserAsync(authState.User);

        if (currentUser == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var roles = await UserManager.GetRolesAsync(currentUser);

        currentOrganizationId = CurrentOrganizationIdParam ?? await ContextCookieManager.GetContextAsync(JSRuntime);

        currentProjectId = CurrentProjectIdParam ?? await ProjectCookieManager.GetProjectAsync(JSRuntime);

        if (roles.Contains("Admin") || roles.Contains("SuperAdmin"))
        {
            Organizations = await DatabaseDataHandler.GetAllAsync<Organization>();
            IsAdmin = true;
        }
        else
        {
            Organizations = await OrganizationService.GetOrganizationsByUserIdAsync(currentUser.Id);
        }

        if (currentOrganizationId.HasValue)
        {
            if (IsAdmin)
            {
                Projects = await ProjectService.GetProjectsByOrganizationIdAsync(currentOrganizationId.Value);
            }
            else
            {
                Projects = await ProjectService.GetProjectsByOrganizationIdAsync(currentOrganizationId.Value);
            }
        }
        else
        {
            Console.WriteLine("No current organization id set, skipping project load.");
        }

        await InvokeAsync(StateHasChanged);
        IsLoading = false;
    }

    private async Task ShowConfirmation(int organizationId, int? projectId)
    {
        SelectedOrganizationId = organizationId;
        SelectedProjectId = projectId;

        // Load projects for the selected organization
        if (organizationId > 0)
        {
            Projects = await ProjectService.GetProjectsByOrganizationIdAsync(organizationId);
        }

        StateHasChanged();
    }

    private async Task<string> GetRoleByOrganizationIdAndUserId(int organizationId,string userId)
    {
        return await UserOrganizationService.GetRoleByOrganizationIdAndUserIdAsync(organizationId, userId);
    }

    private async Task<string> GetRoleByProjectIdAndUserId(int projectId, string userId)
    {
        return await UserProjectService.GetRoleByProjectIdAndUserIdAsync(projectId, userId);
    }

    private void SelectProject(int? projectId)
    {
        SelectedProjectId = projectId;
        StateHasChanged();
    }

    private async Task ToggleProjectsSection()
    {
        if (!ShowProjectsSection && currentOrganizationId.HasValue)
        {
            if(IsAdmin)
                Projects = await ProjectService.GetProjectsByOrganizationIdAsync(currentOrganizationId.Value);
            else
                Projects = await ProjectService.GetProjectsByOrganizationIdAsync(currentOrganizationId.Value);
        }
        ShowProjectsSection = !ShowProjectsSection;
        StateHasChanged();
    }

    private async Task SwitchToProject(int projectId)
    {
        await ProjectCookieManager.SetProjectAsync(JSRuntime, projectId);
        NavigationManager.NavigateTo("", forceLoad: true);
    }

    private async Task ConfirmSwitch()
    {
        if (SelectedOrganizationId.HasValue && SelectedOrganizationId > 0)
        {
            await ContextCookieManager.SetContextAsync(JSRuntime, SelectedOrganizationId.Value);

            if (SelectedProjectId.HasValue && SelectedProjectId > 0)
            {
                await ProjectCookieManager.SetProjectAsync(JSRuntime, SelectedProjectId.Value);
            }
            else
            {
                await ProjectCookieManager.SetProjectAsync(JSRuntime, 0); // Clear project context
            }

            NavigationManager.NavigateTo("", forceLoad: true);
        }
    }

    private async Task CloseModal()
    {
        ShowModal = false;
        await ShowModalChanged.InvokeAsync(ShowModal);
    }
}

<style>
    .modal {
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: rgba(0,0,0,0.5);
        z-index: 10050;
    }

    .modal-dialog {
        max-height: 80vh;
        overflow-y: auto;
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
        top: 100px;
    }

    .modal-content {
        max-height: 100%;
        overflow-y: auto;
    }

    .card {
        transition: all 0.2s ease;
    }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

    .border-primary {
        border: 2px solid #4e73df !important;
    }
</style>