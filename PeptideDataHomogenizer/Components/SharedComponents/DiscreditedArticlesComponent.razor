@using System.Linq
@using Entities
@using PeptideDataHomogenizer.Data

@rendermode InteractiveServer

<div class="discredited-articles-container">
    <div class="header-section mb-4">
        <h3 class="text-danger">Discredited Articles</h3>
        <p class="text-muted">Articles that have been flagged as discredited with their reasons.</p>

        @if (Articles != null && Articles.Any())
        {
            <div class="alert alert-danger">
                <strong>@Articles.Count</strong> discredited articles found.
            </div>
        }
        else
        {
            <div class="alert alert-success">
                No discredited articles found.
            </div>
        }
    </div>

    @if (Articles != null && Articles.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>Title</th>
                        <th>Journal</th>
                        <th>Authors</th>
                        <th>Publication Date</th>
                        <th>DOI</th>
                        <th>Discredited Reason</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var article in Articles.OrderByDescending(a => a.PublicationDate))
                    {
                        var isExpanded = expandedReasons.Contains(article.Doi);
                        <tr class="discredited-row">
                            <td class="font-weight-bold">@article.Title</td>
                            <td>@article.Journal</td>
                            <td class="authors-cell">@TruncateAuthors(article.Authors)</td>
                            <td>@article.PublicationDate.ToShortDateString()</td>
                            <td>
                                <a href="https://www.doi.org/@article.Doi"
                                   target="_blank"
                                   class="btn btn-sm btn-outline-primary doi-link"
                                   title="Open DOI in new tab">
                                    @article.Doi
                                </a>
                            </td>
                            <td class="reason-cell">
                                <div class="reason-content @(isExpanded ? "expanded" : "collapsed")">
                                    @article.DiscreditedReason
                                </div>
                                @if (article.DiscreditedReason?.Length > 50)
                                {
                                    <button class="btn btn-sm btn-link toggle-reason-btn"
                                            @onclick="() => ToggleReason(article.Doi)">
                                        @(isExpanded ? "Show less" : "Show more")
                                    </button>
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm btn-outline-danger remove-btn"  
                                        @onclick="async () => await RemoveArticle(article)">  
                                    <i class="fas fa-trash-alt"></i> Remove  
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<style>
    .discredited-articles-container {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 30px;
    }

    .header-section {
        border-bottom: 1px solid #eee;
        padding-bottom: 15px;
    }

    .discredited-row {
        transition: background-color 0.2s ease;
    }

        .discredited-row:hover {
            background-color: #fff5f5 !important;
        }

    .doi-link {
        font-family: monospace;
        font-size: 0.85rem;
        padding: 0.15rem 0.5rem;
    }

    .authors-cell {
        max-width: 200px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .reason-cell {
        max-width: 300px;
        min-width: 150px;
    }

    .reason-content.collapsed {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .reason-content.expanded {
        white-space: normal;
        word-wrap: break-word;
    }

    .toggle-reason-btn {
        padding: 0;
        font-size: 0.8rem;
        color: #6c757d;
        text-decoration: underline;
    }

        .toggle-reason-btn:hover {
            color: #0056b3;
            text-decoration: underline;
        }

    .remove-btn {
        transition: all 0.2s ease;
    }

        .remove-btn:hover {
            transform: scale(1.05);
        }

    .table th {
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.8rem;
        letter-spacing: 0.5px;
    }
</style>

@code {
    [Parameter]
    public List<Article>? Articles { get; set; }

    [Parameter]
    public DatabaseDataHandler DatabaseDataHandler { get; set; } = null!;

    private async Task RemoveArticle(Article article)
    {
        if (article == null) return;
        await DatabaseDataHandler.RecreditArticleAsync(article.Doi);
        Articles.Remove(article);
        StateHasChanged();
    }

    private HashSet<string> expandedReasons = new HashSet<string>();

    private string TruncateAuthors(string authors)
    {
        if (string.IsNullOrEmpty(authors))
            return "N/A";

        if (authors.Length > 30)
            return authors.Substring(0, 30) + "...";

        return authors;
    }

    private void ToggleReason(string doi)
    {
        if (expandedReasons.Contains(doi))
        {
            expandedReasons.Remove(doi);
        }
        else
        {
            expandedReasons.Add(doi);
        }
    }
}